<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安望云海</title>
  
  <subtitle>记录我的所做所想与成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://w3cay.com/"/>
  <updated>2023-08-19T10:39:38.306Z</updated>
  <id>https://w3cay.com/</id>
  
  <author>
    <name>Bright Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端工程师的价值与学习步骤</title>
    <link href="https://w3cay.com/post/fff0e57c.html"/>
    <id>https://w3cay.com/post/fff0e57c.html</id>
    <published>2022-03-25T12:06:21.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h2><h3 id="一、完成业务需求工作"><a href="#一、完成业务需求工作" class="headerlink" title="一、完成业务需求工作"></a>一、完成业务需求工作</h3><p>这是作为一个公司员工或者是前端的基础任务</p><h3 id="二、研发效率"><a href="#二、研发效率" class="headerlink" title="二、研发效率"></a>二、研发效率</h3><p>支撑业务高速迭代，技术选型、工具链、文档建设、组件沉淀、自动化、基础服务等</p><h3 id="三、研发质量"><a href="#三、研发质量" class="headerlink" title="三、研发质量"></a>三、研发质量</h3><p>高可用、高性能、用户体验卓越，流程规范、监控、code-review、局部重构、故障反思与改进、团队学习与进步等</p><h2 id="学习步骤"><a href="#学习步骤" class="headerlink" title="学习步骤"></a>学习步骤</h2><h3 id="一、打牢基础，深度学习"><a href="#一、打牢基础，深度学习" class="headerlink" title="一、打牢基础，深度学习"></a>一、打牢基础，深度学习</h3><p>基础是内功，内功决定一个程序员的天花板</p><h3 id="二、做好项目，积累经验"><a href="#二、做好项目，积累经验" class="headerlink" title="二、做好项目，积累经验"></a>二、做好项目，积累经验</h3><p>积累经验，研究新技术，新模式，练好招式</p><h3 id="三、经验输出，积极交流"><a href="#三、经验输出，积极交流" class="headerlink" title="三、经验输出，积极交流"></a>三、经验输出，积极交流</h3><p>展示自己的总结，结交好友，寻找伯乐</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;价值&quot;&gt;&lt;a href=&quot;#价值&quot; class=&quot;headerlink&quot; title=&quot;价值&quot;&gt;&lt;/a&gt;价值&lt;/h2&gt;&lt;h3 id=&quot;一、完成业务需求工作&quot;&gt;&lt;a href=&quot;#一、完成业务需求工作&quot; class=&quot;headerlink&quot; title=&quot;一、完成业
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学好摄影的灵魂三问</title>
    <link href="https://w3cay.com/post/dea69632.html"/>
    <id>https://w3cay.com/post/dea69632.html</id>
    <published>2022-03-19T10:54:56.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h0feap202oj20sg0lcgmw.jpg" alt><br><small><em>2019年3月拍摄于扬州瘦西湖</em></small></p><h2 id="为什么你要当一名摄影家？"><a href="#为什么你要当一名摄影家？" class="headerlink" title="为什么你要当一名摄影家？"></a>为什么你要当一名摄影家？</h2><p>不久的将来，也许有人会问你：</p><p>“为什么你要当一名摄影家？”</p><p>你将这样回答：</p><p>“我要成为一名摄影家它使我融入周围的世界。”</p><p>“我要成为一名摄露家器为它使我得到心灵的甘露和餐桌上的面包。”</p><p>“我要成为一名摄影家，因为它使我有能力洞察世间万象并记录下人类的伟大进程。”</p><h2 id="怎样才是一张好照片？"><a href="#怎样才是一张好照片？" class="headerlink" title="怎样才是一张好照片？"></a>怎样才是一张好照片？</h2><p>一幅好照片只集中在以下三条基本原则上：</p><p>1.一幅好照片要有一个鲜明的主题（有时也称之为主体）。或是表现一个人，或是表现一件事物，甚至可以表现该题材的二个故事情节。主题必须明确，毫不含糊，使任何观赏者一眼就能看得出来。</p><p>2.一幅好照片必须能把注意力引向被摄主体，换句话说，使观货者的目光一下子就投向被摄主体。</p><p>3.一幅好照片必须画面简洁，只包括那些有利于把视线引向被摄主体的内容，而排除或压缩那些可能分散注意力的内容。</p><p><strong> 现在，要是你再去拍照时，就该向自己提出两个问题了：</strong></p><p>第一，这张照片我要表现的主题是什么？</p><p>第二，我怎样把注意力集中到被摄主体上，又如何把观赏者的视线吸引过来?</p><h2 id="如何寻找拍摄素材？"><a href="#如何寻找拍摄素材？" class="headerlink" title="如何寻找拍摄素材？"></a>如何寻找拍摄素材？</h2><p>观察你周围的世界。 一个日本旅游者在参观你的家乡时也会发现成千上万个动人的画面。</p><p>他之所以能在你的世界里“看到”那么多画面，是因为你的世界对他来说是新奇的</p><p>他观察时使用的是完全不同的眼光。所以，你也应该一样，必须用全新的方式重新观察你周围的一切。</p><p><em>以上摘自《美国纽约摄影学院摄影教材》</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/e6c9d24egy1h0feap202oj20sg0lcgmw.jpg&quot; alt&gt;&lt;br&gt;&lt;small&gt;&lt;em&gt;2019年3月拍摄于扬州瘦西湖&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://w3cay.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="摄影" scheme="https://w3cay.com/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>RSS订阅使用心得分享</title>
    <link href="https://w3cay.com/post/c6ce065e.html"/>
    <id>https://w3cay.com/post/c6ce065e.html</id>
    <published>2022-02-19T06:40:16.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gziqhlratdj211c0n842o.jpg" alt="我的订阅APP界面"></p><blockquote><p>RSS（英文全称：RDF Site Summary 或Really Simple Syndication），中文译作简易资讯聚合，也称聚合内容，是一种讯息来源格式规范，用以聚合多个网站更新的内容并自动通知网站订阅者。使用RSS 后，网站订阅者便无需再手动检视网站是否有新的内容，同时RSS 可将多个网站更新的内容进行整合，以摘要的形式呈现，有助于订阅者快速获取重要资讯，并选择性地点阅检视。<br> <font size="2">– <em>维基百科 <a href="https://zh.wikipedia.org/wiki/RSS" rel="external nofollow noopener noreferrer" target="_blank">https://zh.wikipedia.org/wiki/RSS</a></em></font></p></blockquote><h2 id="为什么又开始使用RSS订阅了"><a href="#为什么又开始使用RSS订阅了" class="headerlink" title="为什么又开始使用RSS订阅了"></a>为什么又开始使用RSS订阅了</h2><p>在使用了大约十年的微博又换了头条之后，我最终还是把获取信息的工具换成了RSS</p><p>微博的 slogan 是 “随时随地发现新鲜事”，它的优势是获取信息非常及时，也是舆论爆发的主要场地。不过它的劣势也非常明显，信息鱼龙混杂，评论戾气很重，对立言论让人感觉摸不着头脑，整个评论区就是个罗生门</p><p>后来，感觉微博实在没什么可看的，特别是热搜无聊到明星一举一动都要上个热搜，于是我就把微博卸载换成了今日头条</p><p>头条的特点是根据你的喜好推荐你想看的内容，这样其实有利有弊，好处是不需要你去浪费时间筛选想看的内容，坏处是这样的推荐算法让会你完全成为了信息的井底之蛙。在头条关注了一些财经博主和新闻媒体，刷了一段时间的，发现头条的资讯内容大部分都是比较肤浅的快讯，没有很多深度的内容。或者说我的关注方式不对吧，总之信息很多，但都不想停留太久</p><p>RSS 在工作的几年断断续续用了很长时间，但是最后基本都是因为工具不好用放弃过一段时间，比如被墙或体验不好或功能太复杂。22年开年，权衡利弊，感觉还是 RSS 更适合我，最主要的是可以订阅一些技术周刊或者博客，之前漫无目的看头条和微博导致我对技术关注少了很多，已经跟不上社区的步伐了，感觉还是非常可惜的</p><p>虽然现在RSS订阅已经算是一个“老古董”了，很多网站或者博客已经停止服务了，但是还是有少数内容不错的网站依然提供服务，依然可以组合订阅出很好的信息流，所以 2022 年初，决定重新开始使用 RSS</p><h2 id="我的-RSS-使用姿势"><a href="#我的-RSS-使用姿势" class="headerlink" title="我的 RSS 使用姿势"></a>我的 RSS 使用姿势</h2><h3 id="订阅工具"><a href="#订阅工具" class="headerlink" title="订阅工具"></a>订阅工具</h3><p>之前在逛社区时，无意中发现了 <a href="https://netnewswire.com/" rel="external nofollow noopener noreferrer" target="_blank">NetNewsWire</a>，一款开源的 RSS 订阅客户端，安装包很小，不过目前主要支持苹果生态的设备，使用了一段时间总体感觉还是很满意的，UI看起来比较清爽，基本功能该有的都有（如头图所示）</p><p>在使用 NetNewsWire 之前也用过 Feedly、Inoreader、 深蓝阅读 甚至最早QQ邮箱的订阅，不过现在基本已经被强了，其他的也因为用户体验不好弃用了</p><h3 id="订阅资源"><a href="#订阅资源" class="headerlink" title="订阅资源"></a>订阅资源</h3><p>目前关注的内容主要是国内几个科技财经技术相关的站点和新闻网站，比如虎嗅、雪球、InfoQ 和澎湃</p><p>其他还有一些社区的内容，比如知乎、github趋势、推特、V2EX</p><p>还有几个个人博主和技术周刊，我把更新频率较慢的放在一起，怕被频率高信息源的直接淹没了，例如阮一峰的网络日志、奇舞周刊、酷壳、MacTalk等博客</p><p>视频类的我也有订阅，主要是油管的一些频道，令人高兴的事是油管频道链接直接支持订阅，非常nice!</p><p>现如今（2022年）已经有很多网站不提供RSS 订阅了，不过有个开源项目 <a href="https://docs.rsshub.app/" rel="external nofollow noopener noreferrer" target="_blank">Rsshub</a> 可以支持很多站点的抓取，并生成 feed 可以订阅，资源非常丰富并且一直在更新中<strong>(2022年3月订阅源已被强，不过可以自己部署或者找镜像)</strong></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzisyq87sjj215w0ogtbj.jpg" alt></p><p>还有可以转微信公众号的 feed 聚合站点：<a href="http://www.jintiankansha.me/" rel="external nofollow noopener noreferrer" target="_blank">今天看点啥</a>、<a href="https://werss.app/" rel="external nofollow noopener noreferrer" target="_blank">Werss</a>,  不过都有免费订阅数量限制，更多需要买会员了</p><h3 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h3><p>通过 NetNewsWire 订阅了以上列举的一些资源之后，每天会在空余时间浏览一下，资讯类订阅的信息更新非常及时的，最喜欢的就是虎嗅的订阅，会推荐很多深度文章和精选的微信公众号文章，总体感觉质量还是非常不错的，能学到平常很难接触到的知识，比如今天读到的<a href="https://www.huxiu.com/article/499422.html?f=rss" rel="external nofollow noopener noreferrer" target="_blank">《SpaceX星际飞船安全着陆，但载人登陆火星依然漫长》- 中国工程院院刊©</a> ，我在头条或者微博应该不会主动订阅这种工程院的文章，但是通过订阅资讯类站点，经过编辑的精选我就能了解更多的知识，不会出现信息面的闭塞</p><p>虽然去找订阅资源和订阅的过程比较繁琐，但这样操作下来的结果就是，得到一个适合自己的信息流系统，能更高效的获取信息。<strong>RSS本质来讲是反人性的，但是往往反人性的东西会带来充实</strong></p><p>自我感觉深度文章的价值还是高于简讯类的信息，所以在订阅源的挑选上，我会优先订阅深度文章类型的，快讯类的就会被我剔除。其实这个世界很多信息根本不需要知道，少一点纷杂的信息，内心可以多一些平静，逃离无限的 refresh 过程。引用一篇文章下面的评论，感觉说的很对： </p><blockquote><p>使用聚合资讯订阅就是为了有一个属于自己、可以离线阅读的聚合信息源。<br>要达到数字极简的目标，就需要避免受到各种在线推送算法、碎片化通知的干扰</p></blockquote><h1 id="RSS-的发展"><a href="#RSS-的发展" class="headerlink" title="RSS 的发展"></a>RSS 的发展</h1><p>RSS 虽然非常好用，但是还是有很多缺陷导致了他的落寞，注定小众。</p><p>比如最重要的商业化，RSS 只是个简单资源订阅协议，无法直接让内容提供方实现盈利，也就让生产者缺少了开放 RSS 的动力</p><p>因此，内容源的缺乏也导致用户在寻找订阅源的过程中非常繁琐，劝退了很多人，我曾经也因这个原因放弃过。不过，随着 Rsshub 的壮大，目前RSS 有了一点复兴的意思，毕竟内容源的丰富程度是很关键的，决定了 RSS 的用户体验</p><p>总之，RSS 要想发展壮大还是要在商业化上进行探索，只有保障了内容提供方的利益，才能让内容方更愿意提供 feed 内容的持续输出</p><p>最近出现了基于大区块链概念的RSS3协议 <a href="https://rss3.io/" rel="external nofollow noopener noreferrer" target="_blank">rss3.io</a>，对订阅的内容增加了所有权的概念，甚至可以通过区块链对参与者进行利益的分配，这个激励机制的加入可能会促进 RSS3 应用的发展。目前来看（202202）还只是在概念阶段，甚至有炒作的情况，具体发展还是静观其变吧</p><p>看了下自己的手机，希望互联网能真正的回归到互联网的初衷吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/e6c9d24egy1gziqhlratdj211c0n842o.jpg&quot; alt=&quot;我的订阅APP界面&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RSS（英文全称：RDF Site Summ
      
    
    </summary>
    
    
      <category term="RSS" scheme="https://w3cay.com/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>2021年回顾与思考</title>
    <link href="https://w3cay.com/post/fde52577.html"/>
    <id>https://w3cay.com/post/fde52577.html</id>
    <published>2022-01-23T12:51:35.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymqjruaipj30sg0lc40g.jpg" alt></p><h3 id="总体回顾"><a href="#总体回顾" class="headerlink" title="总体回顾"></a>总体回顾</h3><p>2021 这一年过的也是很快，一整年都在疫情的笼罩下，总感觉心里不畅快。</p><p>今年算是过的比较“浑浑噩噩”的一年，没有什么目标，没有什么可以拼的方向，处在一个比较迷茫的时候。另一方面人也相对放松不少，有时间思考一些事情。同时这一年也去过一些地方，读过一些书，也有一些感悟</p><h3 id="去过的地方"><a href="#去过的地方" class="headerlink" title="去过的地方"></a>去过的地方</h3><p>今年虽然有疫情但是还是实现了三次长途旅行，分别去了青岛、西安和甘南（甘肃的南部地区）</p><h4 id="青岛"><a href="#青岛" class="headerlink" title="青岛"></a>青岛</h4><p>2020年的年底买了东航随心飞，只有半年的有效期，基本都用在回郑州了找女朋友了。第一次用在出去玩就是四月份去了趟青岛</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymo6ofpowj30u40k4whd.jpg" alt></p><p>沿着海岸线散步，海天一色的美景，很治愈</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymofbaaihj31hi0u0k0m.jpg" alt></p><p>看到有人在海边坐在野餐垫上看书，感觉很惬意啊</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymo8h90xdj30u40k40ud.jpg" alt></p><p>在小麦岛拍的夕阳，附近有很多年轻的学生周末野餐</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymoa0wpz9j30u40k4acf.jpg" alt></p><p>奥林匹克帆船中心，还是很美的</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymob01gq8j30u40k476r.jpg" alt></p><p>奥帆中心里面的小店门口立着 “我爱青岛” 标识</p><p>青岛给人的感觉是个很浪漫的城市，工作日在城区上上班，周末来海边走走，放松放松可太惬意了。不过听说青岛冬天比较冷，而且湿气重，没体验过就不评论了</p><h4 id="西安"><a href="#西安" class="headerlink" title="西安"></a>西安</h4><p>西安是我跟女朋友五一劳动节一起去的，因为我们异地，平常也没有太多时间一起出去，就选择这个假期出去玩，但是就像预期的那样，人很多，第一天去，还下了场大雨</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymorzjyq2j30sg0lcjsj.jpg" alt></p><p>西安鼓楼</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymom8t1zyj31400u042w.jpg" alt></p><p>西安的回民街，去吃了 biangbiang 面，味道还是很好的，但是稍稍有些油了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymor7fsj1j30sg0lct9s.jpg" alt></p><p>大雁塔附近，也是人山人海的，本来想看演出，结果因为疫情原因暂停了，非常可惜</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymorex7e7j30sg0lcq3u.jpg" alt></p><p>大唐不夜城，也是人太多也没看到什么表演，匆匆走过去了</p><p>总之，西安这趟行程体验一般，时间选择的不太好，下次有机会再来吧。出去玩还是尽量不选择节假日吧，花销很高反而体验不好</p><h4 id="甘南"><a href="#甘南" class="headerlink" title="甘南"></a>甘南</h4><p>甘南是6月份跟公司团建一起去的，之前去过川西但是没有去过这里，感觉是今年最佳的旅行，因为真的是太美了，但是因为甘南海拔有些高，有些高反的症状</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymqbq97idj30sg0lctbf.jpg" alt></p><p>刚到兰州就找地方吃饭，当然是要吃当地的烤羊肉串啦</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymqcsytzxj30sg0lcwhh.jpg" alt></p><p>来到拉卜楞寺附近的民俗住下，我们团队包下了整个两层楼，大家晚上一起聊天玩游戏，相当热闹</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymqgxjea3j30sg0lc3zl.jpg" alt></p><p>自驾走在道路上，看着沿途路上的风景，车里放着音乐</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymqhn2rsfj30u40k4q4r.jpg" alt></p><p>碌曲县路上的一个观景台，入口就有卖牛肉干的，我们买了好多回去，砍价砍了半天</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymqjruaipj30sg0lc40g.jpg" alt></p><p>站在扎尕那民宿拍的，感觉美的不行，仿佛到了瑞士一样。顺便说一句，中国的西部还是有很多好看的大自然风光的，不比欧洲或者其他国家的景色差，只是没有开发或者宣传的比较少而已</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymql4f8k7j30sg0lcwgj.jpg" alt></p><p>花湖生态区，之前从来没听说过这个景区，但是真的很美，真的就像进入画中一样，我们在这里拍了好多张照片</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gymqn6iq7tj30sg0lcjsz.jpg" alt></p><p>黄河九曲第一弯，我们是坐一个超长的扶梯上来的，美景尽收眼底，这里的黄河真的很平静很壮观</p><p>总之甘南是个好地方，17年就有同事推荐过，当时没机会去。这里非常原生态，是城市忙碌打工人出来放松的圣地，并且人也不多。以后会带自己女朋友来看看。</p><h2 id="看过的书"><a href="#看过的书" class="headerlink" title="看过的书"></a>看过的书</h2><p>2021年闲暇之余没什么特别要做的事情，周末之余看了些杂书</p><h3 id="《在火星上退休——伊隆•马斯克传》"><a href="#《在火星上退休——伊隆•马斯克传》" class="headerlink" title="《在火星上退休——伊隆•马斯克传》"></a>《在火星上退休——伊隆•马斯克传》</h3><p>一本讲马斯克的家庭背景和创办科技公司的心路历程，以及他的未来理想。看完全书，看到马斯克的成功并非偶然，冒险，永不言败，创新，真诚，目标，努力，圈子，家庭背景，聪明等等一系列因素促使了他的成功。</p><blockquote><p>“事实上，唯一有意义去做的事，就是努力提高全人类的智慧，为更高层次的集体文明而努力一生，这就是我活着的意义。”</p></blockquote><h3 id="《向上生长》"><a href="#《向上生长》" class="headerlink" title="《向上生长》"></a>《向上生长》</h3><p>九边大佬的一本讲人生问题的书，有用的东西很多，但是需要慢慢去消化才行。读完之后感觉能记住的不多。不过有很多话我还是很有共鸣的。后来在微博和头条都关注了，文章质量很高，还是挺佩服的</p><h3 id="《我们仨》"><a href="#《我们仨》" class="headerlink" title="《我们仨》"></a>《我们仨》</h3><p>这本书是讲杨绛先生一家人的生活的书，虽然一开始读起来有些感觉不知所云，到后面越读越感兴趣，一口气看完了。背景是上个世纪纷杂混乱的年代，从微观角度叙述了一家三口的分分合合，很温馨，也很耐人寻味。</p><h3 id="《让时间陪你慢慢变富》"><a href="#《让时间陪你慢慢变富》" class="headerlink" title="《让时间陪你慢慢变富》"></a>《让时间陪你慢慢变富》</h3><p>李笑来的一本讲定投的书，看过之后总之就是一个结论：不论是微观的金融还是宏观的人生，我们看不清趋势，所以我们能做的就是去定投。定投在这里不仅仅是股市基金一类的投资产品，还包括我们的人生，持续不断的学习也是定投。定投是“主动地被动”的最佳践行策略</p><h3 id="《元宇宙》"><a href="#《元宇宙》" class="headerlink" title="《元宇宙》"></a>《元宇宙》</h3><p>一本追热度的一本书，作者写的很快，我看的也比较快。基本上就是了解下什么是元宇宙。</p><blockquote><p>元宇宙八个基本特征：身份（ Identity）、朋友（ Friends）、沉浸感（ Immersive）、低延迟（ Low Friction）、多元化（ Variety）、随地（ Anywhere）、经济系统（ Economy）和文明（ Civility）。基于 Baszucki的标准，“元宇宙” =创造 +娱乐 +展示 +社交 +交易，人们在“元宇宙”中可以实现深度体验。</p></blockquote><h3 id="《解读基金——我的投资观与实践（修订版）》"><a href="#《解读基金——我的投资观与实践（修订版）》" class="headerlink" title="《解读基金——我的投资观与实践（修订版）》"></a>《解读基金——我的投资观与实践（修订版）》</h3><p>今年买了些基金，对基金的投资总感觉是一知半解，想找本书系统性的学习下，这本书作者写的时候比较早了，但是基金的基本知识是不会变的，所以还是有参考价值的</p><blockquote><p>按照风险调整后的收益对同类的基金进行排序，收益最高的排在前列。排在前 10%的基金被授予五星基金，其后 22. 5%的基金被授予四星基金，再后面 35%的基金被授予三星，再再后面的 22. 5%是两星基金，最后的 10%是一星基金。</p></blockquote><blockquote><p> 投资基金是理财，而不是发财。</p></blockquote><blockquote><p>长期来讲市场是向上的，我们赚的是投资企业的钱</p></blockquote><blockquote><p>投资观念：我会反复强调风险和长期投资。风险是必然的，也只有长期投资才能降低这些风险。预测市场绝对不是好主意</p></blockquote><h2 id="工作与学习"><a href="#工作与学习" class="headerlink" title="工作与学习"></a>工作与学习</h2><p>工作上 2021 年一直感觉自己很忙，加班的日子还是很多的，总体感觉这一年就是 Focus 在公司业务上，对技术的关注度降低很多。这也是我最近在思考的问题：未来的技术成长方向到底是是什么？这也是2021年对技术迷茫的表现。可能自己已经到了瓶颈期了，感觉对什么技术都提不起兴趣了，觉得没有什么可钻研的了，也可能是我沉迷工作，太久没关注社区技术的更新了，导致已经失去了追技术的热情了</p><p>总之 2022 年还是要调整下自己的心态。寻找新的钻研方向。争取能输出一些东西</p><p>除了技术，英语的学习也是在逐步进行中，买了新概念三来复习和稳固自己的英语听读。虽然学习进度有点慢，但是还是希望自己能坚持下来</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>以上就是我的2021年总结，本来感觉2021年过的还是比较平庸的，但是感觉这一年说快不快，说慢也不慢。去过一些地方，看过一些书，总体还是比较充实的一年吧</p><p>以上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008i3skNgy1gymqjruaipj30sg0lc40g.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;总体回顾&quot;&gt;&lt;a href=&quot;#总体回顾&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://w3cay.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="年终总结" scheme="https://w3cay.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>群名大全小程序</title>
    <link href="https://w3cay.com/post/e265e1ee.html"/>
    <id>https://w3cay.com/post/e265e1ee.html</id>
    <published>2020-10-11T07:52:30.000Z</published>
    <updated>2023-08-19T10:39:38.310Z</updated>
    
    <content type="html"><![CDATA[<div class="photos-row"><br>  <img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzybra1lyij20n01au3zo.jpg" width="180"><br>  <img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzybr9pqndj20n01al3zo.jpg" width="180"><br>  <img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzybr99u30j20n01ajq3g.jpg" width="180"><br></div><br><div><p style="float: right; margin-left: 20px"><br> <img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzybvcc9xsj2076076749.jpg" width="100"><br></p><br></div><p>群名大全小程序，提供最具逼格趣味的微信群名，带你装逼带你飞，也欢迎分享你的霸气群名，微信搜索『群名大全』或 扫描小程序码访问</p>]]></content>
    
    <summary type="html">
    
      有内涵、够霸气、又好听的微信群名、QQ群名称聚集地
    
    </summary>
    
    
      <category term="小程序" scheme="https://w3cay.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="APP" scheme="https://w3cay.com/tags/APP/"/>
    
      <category term="群名大全" scheme="https://w3cay.com/tags/%E7%BE%A4%E5%90%8D%E5%A4%A7%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>时光里程表小程序</title>
    <link href="https://w3cay.com/post/1be3071d.html"/>
    <id>https://w3cay.com/post/1be3071d.html</id>
    <published>2020-06-23T12:51:35.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<div class="photos-row"><br>  <img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzybr8xv6ij20n01aoq4k.jpg" width="180"><br>  <img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzybr8ks9dj20n01at75p.jpg" width="180"><br>  <img src="https://tva1.sinaimg.cn/large/e6c9d24egy1gzybr81zafj20n01bd40n.jpg" width="180"><br></div><br><div><p style="float: right; margin-left: 20px"><br> <img src="https://tva1.sinaimg.cn/large/008i3skNgy1gynquz4rdnj309k09kmxa.jpg" width="100"><br></p><br></div><p>时光里程表是一款可以记录重要日子的小程序。包括倒数日、正数日、纪念日、生日、恋爱天数等，同时支持年、月、周、日多维度切换。微信搜索『时光里程表』或 扫描小程序码访问</p>]]></content>
    
    <summary type="html">
    
      时光里程表是一款时间记录仪，可记录包括倒数日、正数日、纪念日、生日、恋爱天数等时间，支持年、月、周、日多维度切换
    
    </summary>
    
    
      <category term="时光记录" scheme="https://w3cay.com/tags/%E6%97%B6%E5%85%89%E8%AE%B0%E5%BD%95/"/>
    
      <category term="倒数日" scheme="https://w3cay.com/tags/%E5%80%92%E6%95%B0%E6%97%A5/"/>
    
      <category term="纪念日" scheme="https://w3cay.com/tags/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    
      <category term="小程序" scheme="https://w3cay.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="APP" scheme="https://w3cay.com/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>读《见识》摘录与随想</title>
    <link href="https://w3cay.com/post/65e1bca0.html"/>
    <id>https://w3cay.com/post/65e1bca0.html</id>
    <published>2020-02-06T16:05:45.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>“命”主要取决于两个因素：环境因素和我们自己对未来走向划定的方向</p></li><li><p>幸福感：需求（欲望）得到满足时所产生的愉悦感</p></li></ol><ul><li>本源：<strong>基因的传承</strong>和<strong>影响力</strong></li><li>需求<ul><li>精神层面：成就感、情感、安全感、舒适感、娱乐</li><li>生理层面：性、吃、睡</li></ul></li></ul><ol start="3"><li><p>人生是一条河，每个人总希望自己这条河能够更宽一点，更深一点，更长一点</p></li><li><p>我们必须承认，任何社会都是分层次的</p></li><li><p>对于年轻人来讲，对自己的投资和职业上的进步，远比在股市上捞点钱或者向父母借钱买一套房子更为重要，也更为靠得住</p></li><li><p>亲密关系重要程度：夫妻优于子女，更优于双方父母</p></li><li><p>向死而生，周国平对待生活的态度：“这个世界大家其实都在排着队沿着一条路往前走，停不下来，走到尽头就是死亡（到此为止和梁实秋讲得差不多)。这时，有些男人和女人搭上了腔，开始说笑起来，更多的人参与了进来，整个队伍便充满了欢乐。”</p></li><li><p>参考《自私的基因》，我们不过是基因的载体，所有的物质的生命，不过是基因为了延续和进化的目的而存在的，我们的生命真的没有那么重要。在我们有限的生命中，如果能够将遗传的信息传递下去，再将创造出的信息（知识等）流传下去，我们的生命已经相当完美。</p></li><li><p>很多时候，我们把太多的精力花在了选择上，而不是经营上，导致难以精进。或许少些选择，会更加聚焦，也会让我们更幸福、更成功。</p></li><li><p>生命有限，少做事情，做好事情</p></li><li><p>长远利益大于眼前利益，人生要做动态规划</p></li><li><p>大部分人都在忙忙碌碌中匆匆地走完一生，是否有幸福可言，只有天晓得</p></li><li><p>阅读不仅让我们在冷酷无情的科技时代获得喘息，而且重启了大脑深入思考的功能，还是抵抗狭隘、思想控制和舆论支配的方式</p></li><li><p>朋友是我们一生的财富</p></li><li><p>互联网的本质是<strong>连接</strong>，连接比拥有更重要</p></li><li><p>当一个公司的历史使命完成之后，它退出历史舞台是对整个社会的最后一次贡献，因为它把宝贵的人力和土地资源释放给了未来的公司</p></li><li><p>最好的教育是让受教育者自己发挥特长和潜力</p></li><li><p>人的第一份工作很重要，它的性质和成败决定了你此后职业发展的方向和事业起点</p></li><li><p>永远要明确，工作不是为了公司或者他人，而是为了自己的职业发展这个既定的大方向</p></li><li><p>基层的员工要抬起头，而管理者要弯下腰</p></li><li><p>适度的选择给我们自由，但是过多的选择会适得其反</p></li><li><p>每个人钱的多少，反映了调用社会资源（包括自然和人两种资源）的总量，钱只有花出去才是自己的</p></li></ol>]]></content>
    
    <summary type="html">
    
      读《见识》摘录与随想
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://w3cay.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="文摘" scheme="https://w3cay.com/tags/%E6%96%87%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>成为一名优秀的前端工程师</title>
    <link href="https://w3cay.com/post/60ca7ed4.html"/>
    <id>https://w3cay.com/post/60ca7ed4.html</id>
    <published>2019-11-23T14:29:33.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今年的年终总结提前了些，趁着自己刚换了个公司，索性把这一年多对前端开发的思考总结分享一下</p><p>首先，我自己开始学前端是在大学时候就已经确定了，也是感觉做前端比较好玩有成就感，随即入坑，趁着移动互联网大众创新的大环境，从实习毕业到转正，后来换了两次工作，一路上还算比较的顺利，找工作也没遇到大的曲折，现在想想做前端也已经四年了（算上实习）。但是也正是因为这样的「顺利」，使得我还包括很多前端同学都忽略了很多我们作为前端工程师应该具备的东西</p><p>到了今年，移动互联网的红利渐渐消失，全球经济下行，很多公司相继倒闭，裁员潮让很多人失去工作，或者很难找到工作。包括这次我也是在准备了很久才决定出去试试机会，面试求职的过程中会出现这样的情况：虽然对方感觉你已经很好了，但是还是要让你等很久才会给你答复，甚至有的 HR 打电话直接告诉我，“我们再比较下，会晚些给您 Offer”。</p><p>所以在当前的环境下，为了让自己不被时代抛弃，掌握职业发展的主动权，思考成为一名优秀出众的前端工程师变的尤为重要，以下即是我的反思</p><h2 id="如何成为一名优秀的前端工程师"><a href="#如何成为一名优秀的前端工程师" class="headerlink" title="如何成为一名优秀的前端工程师"></a>如何成为一名优秀的前端工程师</h2><p>这个话题其实很多人都有自己的总结，包括业界大牛克军的内部分享<a href="/post/d15c2efd.html">《和团队谈个人成长》</a>，我也是看了几遍，每次看都深有体会。说到成为优秀的前端工程师，很认同其中关于成长的描述，即成长包括<strong>客观因素</strong>和<strong>主观因素</strong>，下面就这两个方面说下我自己的想法吧</p><h3 id="客观因素"><a href="#客观因素" class="headerlink" title="客观因素"></a>客观因素</h3><p>如果熟知 JavaScript 都知道有个 this 变量是指向环境上下文的，同样一个方法，this 指向不同，返回的内容就是不一样的，这就是环境的力量，同样一个人，处在的环境不同，成长的方向和进度也会大不同。</p><p>我还没毕业就选择了在一家小创业公司开始实习，当时给我的感觉是兴奋的，因为这家公司很有朝气，部门的Leader 都很厉害，我在这家公司学到了很多东西，成长也很快。但是回过头来想一想，如果当时我能在一家大公司实习该多好啊，知乎上很多问题都讨论过毕业是进大公司还是小公司好。当时的我也很迷茫，没有意识到这个问题的重要性。</p><p>现在让我回答，我肯定建议你先去大公司，当然前提是你实习的时候就很优秀，毕竟大公司要求还是比较严格的，其中有对基础知识和逻辑能力的考察，还会参考你所在学校的实力名气等。至于为什么选择去大公司，还是回到主题，那就是环境。</p><p>大公司因为业务与技术的流程相对规范化，更适合一张白纸的毕业生去规范你的行为习惯、做事态度、思考方式等等，并且前端的基础设施也比较丰富，能让你学到很多工程化的东西，开阔视野，同时你的同事也都是业界优秀的人，能让你避免去走很多弯路，更注重人才的培养。</p><p>小公司一般都处在业务扩张，迅速迭代的过程中，一方面，会让你一不小心就陷入业务的漩涡，导致缺乏总结思考的过程，另一方面，小公司也缺乏完善的基础设施做代码测试或者监控等流程，导致你对于性能的优化和产品的质量问题都比较模棱两可。这种环境会让你的成长很慢甚至产生对前端开发的误解，以为前端不过如此</p><p>最近在看吴军老师的《见识》，他对年轻人职场的一个建议就是：</p><blockquote><p>人的第一份工作很重要，它的性质和成败决定了你此后职业发展的方向和事业起点</p></blockquote><p>所以，初入前端的人还是尽量靠自己的努力进入大厂，依靠这种环境资源，不断打磨自己，你就像一个产品，即使出去也是人人争抢</p><p>说到打磨自己，下面就要谈谈主观因素了，主观因素其实就是靠自己，那么如何靠自己能够成为优秀的前端工程师呢？</p><h2 id="主观因素"><a href="#主观因素" class="headerlink" title="主观因素"></a>主观因素</h2><p>我们大家都知道「玉」，好的玉，颜色剔透，色泽均匀，经过细心雕琢，成为精美的形状，随即成为市场上的“宠儿”。其实，我们每个前端工程师也都类似一块玉，不仅需要良好的内在品质，也需要经过不断的打磨才能成为一名优秀的工程师。</p><p>所以，我把如何成为优秀的前端工程师主观因素分为两个部分，分别是<strong>素养</strong>（质地）和<strong>积累</strong>（雕琢）。</p><p><img src="https://ftp.bmp.ovh/imgs/2019/11/9d5c6a04e2725c02.png" alt="优秀的前端工程师"></p><h3 id="素养"><a href="#素养" class="headerlink" title="素养"></a>素养</h3><p>我自己认为比较重要的优秀前端工程师或者说是工程师的素养主要包括<strong>学习能力</strong>、<strong>革新能力</strong>、<strong>效率意识</strong>、<strong>严谨态度</strong>这四个方面</p><h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4><p>作为一名前端，学习是首要且重要的事情，前端技术的更迭的速度是十分快的，社区里很多人都在说「学不动了」这样的话，谁说不是呢？各种框架、库、工具、语言层出不穷，可能这个还没搞懂或者使用，又出了新的东西，让人感觉十分疲惫。但是我们大多时候其实都在学着怎么使用，而没有学这是什么原理，导致学的再多也只是皮毛。所以<strong>要学习就深入系统的学</strong>，构建自己的知识体系，比如 react 和 vue 的原理其实很多相通的地方，只需要搞懂一个的原理，另一个也就很容易就能理解，这样就减少了很多学习成本。同时要<strong>时刻保持学习的态度</strong>，半年不学习可能就跟不上技术的步伐了。</p><h4 id="革新"><a href="#革新" class="headerlink" title="革新"></a>革新</h4><p>大家都在讲创新，那是因为改革与创新太重要了。一个拥有创新点子的工程师比照葫芦画瓢的工程师更能带动业务的发展，得到公司的认可。我自认为我也不是很会创新的人，但是我也会经常尝试着改变创新一些东西，不论是在用户体验还是效率上的。</p><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><p>说道效率，我总觉得「懒」确实是人类进步的动力来源。我在工作过程中，如果发现什么流程需要手动重复或者过程严重影响到了效率，我就会想怎么优化这个流程，不管是通过开发一个工具还是规范出一套流程。这样能让你省出很多时间来做其它的事情。拥有效率的意识，会让你更能优化你的工作流程，同时减少你加班的时间</p><h4 id="严谨"><a href="#严谨" class="headerlink" title="严谨"></a>严谨</h4><p>态度的严谨对于一个工程师是非常重要的，对于平常的优化工作，你不能说「快了很多」或者「占用内存更小了」，这样说，谁知道到底是快了多少，减少了多少内存的占用。而是要通过科学的实验，通过数据的形式输出。没有证据的支撑，没人会知道你到底做的有没有效果。很多大公司都有数据监控的一些基础设施，这些都是很好的参考依据。</p><h3 id="积累"><a href="#积累" class="headerlink" title="积累"></a>积累</h3><p>拥有以上的内在品质还不够，那只能说明你是个质地良好的「石头」，还需要长期的积累与雕琢才能成为名个优秀的前端工程师。在积累上，我认为主要是知识的积累和经验的积累</p><h4 id="知识积累"><a href="#知识积累" class="headerlink" title="知识积累"></a>知识积累</h4><p>作为一名技术，技术知识的积累是非常重要的，我也因为基础知识薄弱吃过很多亏，现在也在不断的补充学习。我理解的知识主要分为广度和深度两个方向的知识。</p><p>在广度上，不仅要掌握前端的基础知识，还要夯实编程基础，比如软件工程方面的思想，设计模式，甚至还有上下游的知识，包括客户端、服务端、运维、测试、产品、设计等知识，都要知道了解一些，便于更好的沟通与理解所做的的工作。还有一点就是英语，作为一名优秀的技术，英语永远都是一个必须掌握的东西，因为很多资料都是用英语发表的，学好英语，就能拿到一手的资料，帮助我们更好的理解一个新事物，并能开阔我们的视野。</p><p>在深度上，最好深精一个你愿意去研究的技术方向，比如node、数据可视化、3D技术、编辑器、地图等等，毕竟做技术不能大而全，最后什么都做不好，选定一个方向，常年深耕，说不定你就是这个方向的技术专家了</p><p>技术知识的积累，建议以看书为主，因为书上的内容更加体系，更能让你深入的去理解。技术社区的文章为辅，通过别人的视角去看这门技术。同时要不断做些项目，纸上谈兵的技术终究是纸老虎</p><h4 id="经验积累"><a href="#经验积累" class="headerlink" title="经验积累"></a>经验积累</h4><p>说完知识的积累，还有一个方面就是经验的积累了，这些东西是书本上学不到了，只有你经历了总结了，才是你的沉淀。比如说项目的经验，业务千千万，遇到的问题，踩到的坑都是你的宝贵经验，可以为你以后的项目提供了可靠的参考</p><p>所以在工作中要多去总结我们的业务，遇到的坑多去反思，形成自己的一套技术方案。优秀的工程师在遇到每个问题都能拿出至少一种的解决方案，快速的落地解决问题。</p><p>经验的积累不止这些，还有包括技术架构设计、管理带团队的经验等等，当然要拥有这些经验，除了自己努力，也要靠机遇了，也就是是上面说的客观环境因素了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通常，通过自己主观的努力，是可以改变自己所处的客观环境的，更好的客观环境又能促进你的技能学习和经验的积累，从而实现正向循环。</p><p>以上就是我认为的如何做一名优秀前端工程师的方法。当然这些也都是根据我的所见所闻，包括工作经历、面试过程、看到的文章或书的一些归纳。我也不认为我是个优秀的前端工程师，其中有很大一部分我也在自我提升，不断学习中。</p><p>以上分享若能给你带来一点点启发与共鸣，我将倍感荣幸</p>]]></content>
    
    <summary type="html">
    
      2019年我的前端生涯思考与反思
    
    </summary>
    
    
      <category term="总结" scheme="https://w3cay.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="年终总结" scheme="https://w3cay.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>和团队谈个人成长-克军 [转载]</title>
    <link href="https://w3cay.com/post/d15c2efd.html"/>
    <id>https://w3cay.com/post/d15c2efd.html</id>
    <published>2019-11-22T14:29:11.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsf09u1jj30sg0lcq3v.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsi2tywkj30sg0lct97.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsmru55oj30sg0lcjs3.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsn23edrj30sg0lcgml.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsnai39gj30sg0lcgnh.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsnjcpcej30sg0lcabr.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsnpjal9j30sg0lcad2.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsnyg6cdj30sg0lcmzo.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnso4ln10j30sg0lcjsu.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsoazeq7j30sg0lcjvh.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsohr7ycj30sg0lcjsm.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsoo8hn4j30sg0lctcq.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsoukx2lj30sg0lcgmy.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsp1950tj30sg0lc75y.jpg" alt></p><p>定位自己，关注自己当前阶断的积累，聚焦拐点，均衡发展。有些能力必须要有历经时间和反复历练形成的成熟度。不要试图跳跃、不要急于求成、不要忽视全面均衡的发展。不要成为职场“豆芽菜”。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsp86pq3j30sg0lcadp.jpg" alt></p><p>浮躁就是只关注解决问题的手段，没有真正提高解决问题能力。修炼自己的元能力。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsqwmu5nj30sg0lcwg3.jpg" alt></p><p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsr4jsy7j30sg0lcjsc.jpg" alt></p><p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsrbasm5j30sg0lcn0w.jpg" alt></p><p>电影《天才捕手》。在工作中，要积累真实的感受。看再多的书和文章，没有实践，没有在实际的应用场景中应用，都不算有效的经验。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsu43o2cj30sg0lc76y.jpg" alt></p><p>工作中保持痛感，感受快乐是最好的工作状态！<br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsudlemnj30sg0lcgnh.jpg" alt></p><p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsukyoegj30sg0lc0v7.jpg" alt></p><p>做不同的事情，内心感受是不同的。当你觉得无感时，说明你对技术细节的认知还不够，只是简单的重复。需要通过学习其中所有的技术点来提高技巧。同时，需要不断深入理解，感受实践中用到的技术和工具所发挥的作用。形象的说就是知识的“分辨率”怎么样，是模模糊糊的，还是”精度”很高，了解每一个细微的技术点。你会发现，有太多东西值得探索。只有在具体实践中才有体感，脱离应用场景啃一本书没有用的。进一步，你才能准确定义和抽象出开发中的普便问题。这是提高纵轴挑战水平的方式。所以，不必刻意寻找有挑战、有难度的工作做。重要的是，你能不能潜的更深，积累下更多的有价值的感受。</p><p>如果你正在做一件本身挑战很大的事，这时无须再增加挑战水平（纵轴）而是通过发现和学习已知的未知（对应问题域的知识域）技术来解决问题（横轴）。这时候需要拆解目标，降低挑战，耐心从基础开始学习。内心需要克服浮躁和自我怀疑的情绪。没有银弹能解决所有问题。关注前端技术发展，保持学习是十分重要的。</p><p>任何一种心理状态都不是一成不变的。比如一些能力不错的同学，对于常规需求，处于完全“掌控”的状态。但干的久了，一直做类似的事情挑战水平自然会衰减，通常会进入“无聊”的状态。然后常常会说工作太无聊，缺乏挑战，一成不变。其实是你主观意识上没有加深工作的感受，只是被动的被支配做一些事。经常反省自己所处的状态，每一件事努力做到心流（同时提高纵轴和横轴）</p><p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsuy91s7j30sg0lcabn.jpg" alt></p><p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsv7r7r4j30sg0lcwg5.jpg" alt></p><p>心态管理很重要，尤其是底部状态管理。面对工作中的挫败、不爽、消极、想放弃的情绪，这些都是很正常的起起伏伏。人在做一件事的中途是最敏感、脆弱，最容易自我怀疑的，很容易怀疑目标和方向，半途而废，前功尽弃，这就是所谓的半途效应。在做一些挑战很大、路径很长的事情时，动机不要太强。急躁、焦虑会干扰正常的思维水平（多德森法则）。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsvhownnj30sg0lcah4.jpg" alt></p><p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsvna5lgj30sg0lc40d.jpg" alt></p><p><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbnsvtn9j1j30sg0lcab0.jpg" alt></p><p>原文地址：<a href="https://weibo.com/ttarticle/p/show?id=2309404300456787613157" rel="external nofollow noopener noreferrer" target="_blank">https://weibo.com/ttarticle/p/show?id=2309404300456787613157</a></p><p>​​​​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/0082zybpgy1gbnsf09u1jj30sg0lcq3v.jpg&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/0082zybpgy1
      
    
    </summary>
    
    
      <category term="转载" scheme="https://w3cay.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>2018我的个人书单</title>
    <link href="https://w3cay.com/post/fa437eab.html"/>
    <id>https://w3cay.com/post/fa437eab.html</id>
    <published>2019-01-06T12:51:35.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<p>自从2018年过年买了 kindle ，真的是让我多读了不少书，当然也促进了我的睡眠，甚至后悔没有早点入手。2018已经过去几天了，整理一下去年读的一些书，做一个回顾和归档。</p><h2 id="《精进：如何成为一个很厉害的人》"><a href="#《精进：如何成为一个很厉害的人》" class="headerlink" title="《精进：如何成为一个很厉害的人》"></a>《精进：如何成为一个很厉害的人》</h2><p>这本书是关于时间、行动、思维等自我提升主题的探索。</p><p>我的主要摘录：</p><blockquote><p>一个人如何对待他的时间，决定了他可以成为什么样的人</p></blockquote><blockquote><p>在分析一件事情值不值得去做、花多少精力去做的时候，可以从两个角度来评估：一是这件事在当下将给“我”带来的收益大小，这个收益可以是心智、情感层面的，也可以是身体、物质层面的，我称之为“收益值”；二是这项收益随时间衰减的速度，我称之为“收益半衰期”，半衰期长的事件，其影响会持续</p></blockquote><blockquote><p>实际做事花费的时间总是比预期的要长，即使预期中考虑了侯世达</p></blockquote><blockquote><p>从理论出发不一定能指导实践，只有在实践中通过反思积累的知识才能指导</p></blockquote><blockquote><p>不要只做信息的搬运工 通过解码，深入事物的</p></blockquote><h2 id="《创京东》（刘强东亲述创业之路）"><a href="#《创京东》（刘强东亲述创业之路）" class="headerlink" title="《创京东》（刘强东亲述创业之路）"></a>《创京东》（刘强东亲述创业之路）</h2><p>这个本书介绍了刘强东创业的心血历程，从实体小店铺到京东帝国，让我对创业这件事多了许多敬畏</p><p>我的主要摘录：</p><blockquote><p>如果这事大家都觉得能够做成，那它的价值能有多大呢?正因为大家都觉得做不成，这件事才具备更大的可能性</p></blockquote><h2 id="《我遇见了人类》"><a href="#《我遇见了人类》" class="headerlink" title="《我遇见了人类》"></a>《我遇见了人类》</h2><p>这本书写了一个外星人潜入主人公的身体，并发生了一系列的让这个外星人莫名其妙的事，最后映射出来的是人类世界的温暖</p><p>我的主要摘录：</p><blockquote><p>我窃笑，人类生来就被关押在一具会死的躯壳里，他们居然会更害怕被关押在房间里！</p></blockquote><blockquote><p>在地球上，文明是人类聚集在一起共同压抑本能的结果</p></blockquote><blockquote><p>做人意味着，小时候在圣诞节可以收到一座华丽壮观的城堡，盒子上有一张美轮美奂的城堡的照片，你整天都只想摆弄着城堡以及城堡里的骑士和公主，因为它看起来就像一个完美的人类世界。可唯一的问题在于城堡并没有建好，它只是一些错综复杂的小碎块，尽管盒子里附送了一本说明书，但你怎么也看不懂，你的父母还有阿姨也看不懂。所以你只好被扔在原地，望着盒子上永远无法建起的完美城堡号陶大哭。</p></blockquote><h2 id="《前端工程化：体系设计与实践》"><a href="#《前端工程化：体系设计与实践》" class="headerlink" title="《前端工程化：体系设计与实践》"></a>《前端工程化：体系设计与实践》</h2><p>这本书帮助系统了解前端工程化的相关知识，介绍的是前端工程中脚手架、开发构建、部署、工作流等方面的问题</p><h2 id="《半小时漫画世界史》"><a href="#《半小时漫画世界史》" class="headerlink" title="《半小时漫画世界史》"></a>《半小时漫画世界史》</h2><p>使用风趣幽默的漫画方式讲解了世界史的变迁，读着感觉很有意思，但是读完我就忘完了，哈哈</p><h2 id="《谁动了我的奶酪》"><a href="#《谁动了我的奶酪》" class="headerlink" title="《谁动了我的奶酪》"></a>《谁动了我的奶酪》</h2><p>一本很薄的书，讲的是两只小老鼠和两个小矮人关于奶酪的故事。读下来就能立马明白其中的意思。大意就是告诫人们要拥抱变化，不断努力和探索。而贪图安逸，默守陈规，只会让你的生活变得糟糕，所以这本书就是劝诫人们要保持焦虑，哈哈哈</p><h2 id="《我们为什么会发胖》"><a href="#《我们为什么会发胖》" class="headerlink" title="《我们为什么会发胖》"></a>《我们为什么会发胖》</h2><p>因为今年在健身，所以就想了解下饮食相关的知识，书如其名，告诉我们为什么会发胖</p><p>我的主要摘录：</p><blockquote><p>肥胖归根结底是由激素失衡，而不是卡路里失衡造成的。具体而言就是，食用易消化、富含糖类的食物会刺激胰岛素分泌。这类食物有：精加工的糖类（包括面粉和谷类），马铃薯这样含有淀粉的蔬菜，以及食用糖（如蔗糖和果葡糖浆等）。这些糖类确实会使我们发胖，由于脂肪的累积会让我们感到更饿，于是我们吃得也更多，加之久坐不动，所以更容易</p></blockquote><blockquote><p>在质疑“饮食过度导致肥胖”的所有原因中，最明显的事实一直是， 少吃并不能治疗</p></blockquote><h2 id="《特朗普自传》"><a href="#《特朗普自传》" class="headerlink" title="《特朗普自传》"></a>《特朗普自传》</h2><p>这本书也是属于蹭热度看的，但是看了还没有一半，感觉总统的生活实在太啰嗦了，就没有继续看下去</p><h2 id="《白夜行-东野圭吾作品-》"><a href="#《白夜行-东野圭吾作品-》" class="headerlink" title="《白夜行 (东野圭吾作品) 》"></a>《白夜行 (东野圭吾作品) 》</h2><p>这本书是我17年开始看的，然而看了一半感觉前面太啰嗦，然后就停滞了一段时间，18年继续看下去，发现后面是真的精彩，看的我头皮发麻。总之这本书写的很压抑，毕竟是东野圭吾的书，好像都是这个风格。这本书让我认识到，每个人童年时期受到的影响会映射到他的一辈子，所以我在想其实人性是本善的，只是在你成长的过程中，可能会受到各种侵染，如果受到很大的刺激，会影响一辈子，甚至会报复社会。人生之棋，一步走错，满盘阴影。童年是很重要的人生阶段。</p><p>我的主要摘录：</p><blockquote><p>看个人，有些人一辈子都活在太阳的照耀下，也有些人不得不一直活在漆黑的深夜里。人害怕的，就是本来一直存在的太阳落下不再升起，也就是非常害怕原本照在身上的光芒消失，现在的夏美就是</p></blockquote><blockquote><p>“我的天空里没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。你明白吧？我从来就没有太阳，所以不怕</p></blockquote><h2 id="《论中国》"><a href="#《论中国》" class="headerlink" title="《论中国》"></a>《论中国》</h2><p>这本书是从美国人基辛格的角度来看中国的历史变迁和中国人的特性，多了些客观参考性</p><h2 id="《不可不知的经济真相》"><a href="#《不可不知的经济真相》" class="headerlink" title="《不可不知的经济真相》"></a>《不可不知的经济真相》</h2><p>浅显易懂的讲了中国经济上的一些名词和历史变迁，让我对经济危机、中国的经济模式、投资等问题有了更深的了解，非常适合我这种经济小白，总体感觉不错</p><p>我的主要摘录：</p><blockquote><p>创新，创新，我们几乎天天挂在嘴边，却忽略了它的真正含义是创造新的需求，而一旦有了新的需求，经济就能冲破雾</p></blockquote><blockquote><p>普通人满足需求，卓越者创造需求</p></blockquote><blockquote><p>所有的过剩产能，都是由当初的恶性竞争和过剩供给导致</p></blockquote><blockquote><p>一个人能承担多大的风险，其实并不取决于他的胆量大小，也不取决于是否有夜夜安枕的良好心态，而是取决于他的收入水平</p></blockquote><blockquote><p>你无须拥有，却能愉快使用，这就是共享</p></blockquote><blockquote><p>泡沫为何会反复发生，这是因为千百年来人性不变。人们内心当中总是有着最原始的贪婪和恐惧，贪婪会把人们推向疯狂的天堂，恐惧会撕碎泡沫并把人们推向无尽的深渊</p></blockquote><blockquote><p>他说不管经济繁荣还是衰退，专注于自己核心的业务永远是生存</p></blockquote><p>以上就是2018所有的读书总结摘录，其实还有一些没有列举，大部分是没有读完或者没什么印象的书，哈哈哈，ok，2019 继续！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自从2018年过年买了 kindle ，真的是让我多读了不少书，当然也促进了我的睡眠，甚至后悔没有早点入手。2018已经过去几天了，整理一下去年读的一些书，做一个回顾和归档。&lt;/p&gt;
&lt;h2 id=&quot;《精进：如何成为一个很厉害的人》&quot;&gt;&lt;a href=&quot;#《精进：如何成为一
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://w3cay.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="书单" scheme="https://w3cay.com/tags/%E4%B9%A6%E5%8D%95/"/>
    
      <category term="总结" scheme="https://w3cay.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Set集合与Map集合比较</title>
    <link href="https://w3cay.com/post/775863cf.html"/>
    <id>https://w3cay.com/post/775863cf.html</id>
    <published>2018-12-15T08:58:09.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">特性比较</th><th style="text-align:center">Set</th><th style="text-align:center">WeakSet</th><th style="text-align:center">Map</th><th style="text-align:center">WeakMap </th></tr></thead><tbody><tr><td style="text-align:center">初始化</td><td style="text-align:center"><code>new Set([1,2,3,4])</code></td><td style="text-align:center"><code>new WeakSet([1,2,3,4])</code></td><td style="text-align:center"><code>new Map([[&quot;name&quot;, &quot;Bright&quot;], [&quot;sex&quot;, &quot;男&quot;]])</code></td><td style="text-align:center"><code>new WeakMap([[&quot;name&quot;, &quot;Bright&quot;], [&quot; sex&quot;, &quot;男&quot;]])</code></td></tr><tr><td style="text-align:center">定义</td><td style="text-align:center">一种包含多个非重复值的有序列表</td><td style="text-align:center">是一种特殊的 Set 集合，集合<strong>只支持存放对象弱引用</strong></td><td style="text-align:center">一种多个键值对组成的有序集合</td><td style="text-align:center">是一种特殊的 Map 集合，<strong>只支持对象类型的键名</strong></td></tr><tr><td style="text-align:center"><a href="#可否迭代">可否迭代</a></td><td style="text-align:center">是</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">引用特性</td><td style="text-align:center">成员对象<a href="#强引用">强引用</a></td><td style="text-align:center">成员对象<a href="#弱引用">弱引用</a></td><td style="text-align:center">成员对象<a href="#强引用">强引用</a></td><td style="text-align:center">成员对象<a href="#弱引用">弱引用</a></td></tr><tr><td style="text-align:center">属性方法</td><td style="text-align:center">add() has()  delete() clear() forEach() keys() values() size</td><td style="text-align:center">add() has() delete()</td><td style="text-align:center">set()  get()  has()  delete() clear() forEach() keys() values() size</td><td style="text-align:center">set () get() has() delete()</td></tr><tr><td style="text-align:center">使用建议</td><td style="text-align:center"><a href="#对象局限性">由于对象判断属性存在的局限性</a>，此集合更适用于检测给定的值在集合中是否存在。同时基于本身无重复值的特性，可做数组的去重</td><td style="text-align:center">只可存放对象类型，并方便引用对象的跟踪</td><td style="text-align:center">用于处理键值对数据，存放需要经常存取的数据</td><td style="text-align:center">用于处理键值对数据，键名只可存放对象类型，并方便引用对象的跟踪，最大用途是保存 Web 页面的 DOM 元素</td></tr></tbody></table><hr><h4 id="可否迭代"><a href="#可否迭代" class="headerlink" title="可否迭代"></a>可否迭代</h4><p>是否可迭代用于表示该集合是否支持遍历成员属性，支持包括 forEach()、keys()、values()、for…of 等方法的使用</p><h4 id="对象局限性"><a href="#对象局限性" class="headerlink" title="对象局限性"></a>对象局限性</h4><p>对象中使用 if 来判断一个值的是否存在不够严谨，当属性本身不存在和存在并且值为 false 时，得到的判断结果是一样的，这就会带来问题。还有一种判断对象中属性是否存在的方法 in, 但是该方法会向上遍历继承的原型属性，同样带来一些未知问题，除非该对象继承自 null。</p><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>只要引用存在，垃圾回收机制不会释放被引用对象的内存空间</p><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>引用对象被置空，集合不保存该引用，触发垃圾回收机制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;特性比较&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Set&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;WeakSet&lt;
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://w3cay.com/tags/Javascript/"/>
    
      <category term="基础知识梳理" scheme="https://w3cay.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Web加载速度优化清单</title>
    <link href="https://w3cay.com/post/5891d813.html"/>
    <id>https://w3cay.com/post/5891d813.html</id>
    <published>2018-09-01T07:57:23.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<p>网页加载速度是衡量一个网页好坏的重要标准，网页遗弃率随网页加载时间的增加而增加。据说近一半的用户希望网页加载时间不超过2s，超过3s一般就放弃该网页。时间就是生命，干等着，谁愿意平白无故地+1s呀，所以今天来整理下具体如何加快网页</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><ul><li><p><strong>压缩 HTML:</strong> HTML代码压缩，将注释、空格和新行从生产文件中删除。</p><p>  <em>为什么：</em></p><blockquote><p>删除所有不必要的空格、注释和中断行将减少HTML的大小，加快网站的页面加载时间，并显著减少用户的下载时间。</p></blockquote><p>  <em>怎么做：</em></p><blockquote><p>大多数框架都有插件用来压缩网页的体积。你可以使用一组可以自动完成工作的NPM模块。</p></blockquote><ul><li>🛠 <a href="http://minifycode.com/html-minifier/" rel="external nofollow noopener noreferrer" target="_blank">HTML minifier | Minify Code</a></li><li>📖 <a href="http://perfectionkills.com/experimenting-with-html-minifier/#use_short_doctype" rel="external nofollow noopener noreferrer" target="_blank">Experimenting with HTML minifier — Perfection Kills</a></li></ul></li><li><p><strong>删除不必要的注释：</strong> 确保从您的网页中删除注释。</p><p>  <em>为什么：</em></p><blockquote><p>注释对用户来说是没有用的，应该从生产环境文件中删除。可能需要保留注释的一种情况是：保留远端代码库（keep the origin for a library）。</p></blockquote><p>  <em>怎么做：</em></p><blockquote><p>大多数情况下，可以使用HTML minify插件删除注释。</p></blockquote><ul><li>🛠 <a href="https://www.npmjs.com/package/remove-html-comments" rel="external nofollow noopener noreferrer" target="_blank">remove-html-comments - npm</a></li></ul></li><li><p><strong>删除不必要的属性：</strong> 像 <code>type=&quot;text/javascript&quot;</code> or <code>type=&quot;text/css&quot;</code> 这样的属性应该被移除。</p><pre><code class="html">  &lt;!-- Before HTML5 --&gt;  &lt;script type=&quot;text/javascript&quot;&gt;      // Javascript code  &lt;/script&gt;  &lt;!-- Today --&gt;  &lt;script&gt;      // Javascript code  &lt;/script&gt;</code></pre><p>  <em>为什么</em></p><blockquote><p>类型属性不是必需的，因为HTML5把text/css和text/javascript作为默认值。没用的代码应在网站或应用程序中删除，因为它们会使网页体积增大。</p></blockquote><p>  <em>怎么做：</em></p><blockquote><p>⁃ 确保所有link和script标记都没有任何type属性。</p></blockquote><ul><li>📖 <a href="https://css-tricks.com/the-script-tag/" rel="external nofollow noopener noreferrer" target="_blank">The Script Tag | CSS-Tricks</a></li></ul></li><li><p><strong>在JavaScript引用之前引用CSS标记：</strong>  确保在使用JavaScript代码之前加载CSS。</p><p>  <em>为什么：</em></p><blockquote><p>在引用JavaScript之前引用CSS可以实现更好地并行下载，从而加快浏览器的渲染速度。</p></blockquote><p>  <em>怎么做：</em></p><blockquote><p>确保 head 中的 link 和 style 始终位于 script 之前。</p></blockquote></li></ul><ul><li><p><strong>最小化iframe的数量：</strong>  仅在没有任何其他技术可行性时才使用iframe。尽量避免使用iframe。</p></li><li><p><strong>DNS预取：</strong>  一次 DNS 查询时间大概在60-120ms之间或者更长，提前解析网页中可能的网络连接域名</p><pre><code class="html">   &lt;link rel=&quot;dns-prefetch&quot; href=&quot;http://example.com/&quot;&gt;</code></pre><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3></li><li><p><strong>压缩:</strong>  所有CSS文件都需要被压缩，从生产文件中删除注释，空格和空行。</p><p> <em>为什么：</em></p><blockquote><p>缩小CSS文件后，内容加载速度更快，并且将更少的数据发送到客户端，所以在生产中缩小CSS文件是非常重要，这对用户是有益的，就像任何企业想要降低带宽成本和降低资源。</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>使用工具在构建或部署之前自动压缩文件。</p></blockquote><ul><li>🛠 <a href="https://cssnano.co/" rel="external nofollow noopener noreferrer" target="_blank">cssnano: 基于PostCSS生态系统的模块化压缩工具。</a></li><li>🛠 <a href="https://www.npmjs.com/package/@neutrinojs/style-minify" rel="external nofollow noopener noreferrer" target="_blank">@neutrinojs/style-minify - npm</a></li></ul></li><li><p><strong>Concatenation:</strong>  CSS文件合并（对于HTTP/2效果不是很大）。</p><pre><code class="html"> &lt;!-- 不推荐 --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;foo.css&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;bar.css&quot;/&gt; &lt;!-- 推荐 --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;foobar.css&quot;/&gt;</code></pre><p> <em>为什么：</em></p><blockquote><p>如果你还在使用HTTP/1，那么你就需要合并你的文件。不过在使用HTTP/2的情况下不用这样（效果待测试）。</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>在构建或部署之前使用在线工具或者其他插件来合并文件。<br>当然，要确保合并文件后项目可以正常运行。</p></blockquote><ul><li>📖 <a href="https://hpbn.co/optimizing-application-delivery/#optimizing-for-http2" rel="external nofollow noopener noreferrer" target="_blank">HTTP: 优化应用程序交付 - 高性能浏览器网络 (O’Reilly)</a></li><li>📖 <a href="https://deliciousbrains.com/performance-best-practices-http2/" rel="external nofollow noopener noreferrer" target="_blank">HTTP/2时代的性能最佳实践</a></li></ul></li><li><p><strong>非阻塞：</strong>  CSS文件需要非阻塞引入，以防止DOM花费更多时间才能渲染完成。</p><pre><code class="html"> &lt;link rel=&quot;preload&quot; href=&quot;global.min.css&quot; as=&quot;style&quot; onload=&quot;this.rel=&#39;stylesheet&#39;&quot;&gt; &lt;noscript&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;global.min.css&quot;&gt;&lt;/noscript&gt;</code></pre><p> <em>为什么：</em></p><blockquote><p>CSS文件可以阻止页面加载并延迟页面呈现。使用<code>preload</code>实际上可以在浏览器开始显示页面内容之前加载CSS文件。</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>需要添加<code>rel</code>属性并赋值<code>preload</code>，并在<code>&lt;link&gt;</code>元素上添加<code>as=“style”</code>。</p></blockquote><ul><li>📖 <a href="https://github.com/filamentgroup/loadCSS" rel="external nofollow noopener noreferrer" target="_blank">loadCSS by filament group</a></li><li>📖 <a href="https://gist.github.com/thedaviddias/c24763b82b9991e53928e66a0bafc9bf" rel="external nofollow noopener noreferrer" target="_blank">使用loadCSS预加载CSS的示例</a></li><li>📖 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content" rel="external nofollow noopener noreferrer" target="_blank">使用rel =“preload”预加载内容</a></li><li>📖 <a href="https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/" rel="external nofollow noopener noreferrer" target="_blank">Preload: What Is It Good For? — Smashing Magazine</a></li></ul></li><li><p><strong>CSS类(class)的长度:</strong> class的长度会对HTML和CSS文件产生（轻微）影响。</p><p> <em>为什么：</em></p><blockquote><p>甚至性能影响也是有争议的，项目的命名策略会对样式表的可维护性有重大影响。如果使用BEM，在某些情况下可能会写出比所需要的类名更长的字符。重要的是要明智的选择名字和命名空间。</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>可能有些人更关注类名的长度，但是网站按组件进行划分的话可以帮助减少类名的数量和长度。</p></blockquote><ul><li>🛠 <a href="https://jsperf.com/long-vs-short-class" rel="external nofollow noopener noreferrer" target="_blank">long vs short class · jsPerf</a></li></ul></li><li><p><strong>不用的CSS:</strong>  删除未使用的CSS选择器。</p><p> <em>为什么：</em></p><blockquote><p>删除未使用的CSS选择器可以减小文件的大小，提高资源的加载速度。</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>⚠️ 检查要使用的CSS框架是否已包含reset/normalize代码，可能不需要用到reset/normalize文件中的内容。</p></blockquote><ul><li>🛠 <a href="https://uncss-online.com/" rel="external nofollow noopener noreferrer" target="_blank">UnCSS Online</a></li><li>🛠 <a href="https://github.com/purifycss/purifycss" rel="external nofollow noopener noreferrer" target="_blank">PurifyCSS</a></li><li>🛠 <a href="https://github.com/FullHuman/purgecss" rel="external nofollow noopener noreferrer" target="_blank">PurgeCSS</a></li><li>🛠 <a href="https://developers.google.com/web/updates/2017/04/devtools-release-notes#coverage" rel="external nofollow noopener noreferrer" target="_blank">Chrome DevTools Coverage</a></li></ul></li></ul><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li><p><strong>JS 压缩:</strong>  所有JavaScript文件都要被压缩，生产环境中删除注释、空格和空行（在HTTP/2仍然有效果）。</p><p> <em>为什么：</em></p><blockquote><p>删除所有不必要的空格、注释和空行将减少JavaScript文件的大小，并加快网站的页面加载时间，提升用户体验。</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>建议使用下面的工具在构建或部署之前自动缩小文件。</p></blockquote><ul><li>📖 <a href="https://www.npmjs.com/package/uglify-js" rel="external nofollow noopener noreferrer" target="_blank">uglify-js - npm</a></li><li>📖 <a href="https://scaleyourcode.com/blog/article/28" rel="external nofollow noopener noreferrer" target="_blank">Short read: How is HTTP/2 different? Should we still minify and concatenate?</a></li></ul></li></ul><ul><li><p><strong>非阻塞JavaScript：</strong>  使用defer属性或使用async来异步加载JavaScript文件。</p><pre><code class="html"> &lt;!-- Defer Attribute --&gt; &lt;script defer src=&quot;foo.js&quot;&gt; &lt;!-- Async Attribute --&gt; &lt;script async src=&quot;foo.js&quot;&gt;</code></pre><p> <em>为什么：</em></p><blockquote><p>JavaScript阻止HTML文档的正常解析，因此当解析器到达script标记时（特别是在<head><meta name="generator" content="Hexo 3.9.0">内），它会停止解析并且执行脚本。如果您的脚本位于页面顶部，则强烈建议添加<code>async</code>和<code>defer</code>，但如果在标记之前加载，没有太大影响。但是，使用这些属性来避免性能问题是一种很好的做法。</head></p></blockquote><p> <em>怎么做：</em></p><blockquote><p>添加<code>async</code>（如果脚本不依赖于其他脚本）或<code>defer</code>（如果脚本依赖或依赖于异步脚本）作为script脚本标记的属性。<br>如果有小脚本，可以在异步脚本上方使用内联脚本。</p></blockquote><ul><li>📖 <a href="https://developers.google.com/speed/docs/insights/BlockingJS" rel="external nofollow noopener noreferrer" target="_blank">Remove Render-Blocking JavaScript</a></li></ul></li></ul><ul><li><p><strong>使用 tree shaking 技术减少 js 大小:</strong>  通过构建工具分析 JavaScript 代码并移除生产环境中用不到的 js 模块或方法</p><ul><li>📖 <a href="https://developers.google.com/web/fundamentals/performance/optimizing-javascript/tree-shaking/" rel="external nofollow noopener noreferrer" target="_blank"><br>Reduce JavaScript Payloads with Tree Shaking</a></li></ul></li></ul><ul><li><p><strong>使用 code splitting 分包加载 js:</strong>  通过分包加载，减少首次加载所需时间</p><p> <em>怎么做：</em></p><blockquote><p><strong>Vendor splitting</strong> 根据库文件拆分模块，例如 React 或 lodash 单独打包成一个文件<br><strong>Entry point splitting</strong> 根据入口拆分模块，例如通过多页应用入口或者单页应用路由进行拆分<br><strong>Dynamic splitting</strong> 根据动态加载拆分模块，使用动态加载语法 <code>import()</code> ，实现模块按需加载</p></blockquote><ul><li>📖 <a href="https://developers.google.com/web/fundamentals/performance/optimizing-javascript/code-splitting/" rel="external nofollow noopener noreferrer" target="_blank">Reduce JavaScript Payloads with Tree Shaking</a> </li></ul></li></ul><h3 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h3><ul><li>📖 <a href="https://httparchive.org/reports/page-weight#bytesImg" rel="external nofollow noopener noreferrer" target="_blank">Image Bytes in 2018</a></li></ul><ul><li><p><strong>图像优化:</strong>  在保证压缩后的图片符合产品要求的情况下将图像进行优化。</p><p> <em>为什么：</em></p><blockquote><p>优化的图像在浏览器中加载速度更快，消耗的数据更少。</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>尽可能尝试使用CSS3效果（而不是用小图像替代）<br>尽可能使用字体图片<br>使用 SVG<br>使用编译工具并指定85以下的级别压缩。</p></blockquote><ul><li>📖 <a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization" rel="external nofollow noopener noreferrer" target="_blank">Image Optimization | Web Fundamentals | Google Developers</a></li><li>🛠 <a href="https://tinyjpg.com/" rel="external nofollow noopener noreferrer" target="_blank">TinyJPG – Compress JPEG images intelligently</a></li><li>🛠 <a href="https://kraken.io/web-interface" rel="external nofollow noopener noreferrer" target="_blank">Kraken.io - Online Image Optimizer</a></li><li>🛠 <a href="https://compressor.io/compress" rel="external nofollow noopener noreferrer" target="_blank">Compressor.io - optimize and compress JPEG photos and PNG images</a></li><li>🛠 <a href="https://webspeedtest.cloudinary.com/" rel="external nofollow noopener noreferrer" target="_blank">Cloudinary - Image Analysis Tool</a></li></ul></li></ul><ul><li><p><strong>图像格式：</strong>  适当选择图像格式。</p><p> <em>为什么：</em></p><blockquote><p>确保图片不会减慢网站速度</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>使用<a href="https://developers.google.com/web/tools/lighthouse/" rel="external nofollow noopener noreferrer" target="_blank">Lighthouse</a>识别哪些图像可以使用下一代图片格式（如JPEG 2000m JPEG XR或WebP）。<br>比较不同的格式，有时使用PNG8比PNG16好，有时候不是。</p></blockquote><ul><li>📖 <a href="https://developers.google.com/web/tools/lighthouse/audits/webp" rel="external nofollow noopener noreferrer" target="_blank">Serve Images in Next-Gen Formats  |  Tools for Web Developers  |  Google Developers</a></li><li>📖 <a href="https://www.sitepoint.com/what-is-the-right-image-format-for-your-website/" rel="external nofollow noopener noreferrer" target="_blank">What Is the Right Image Format for Your Website? — SitePoint</a><ul><li>📖 <a href="https://www.sitepoint.com/png8-the-clear-winner/" rel="external nofollow noopener noreferrer" target="_blank">PNG8 - The Clear Winner — SitePoint</a></li><li>📖 <a href="https://www.diyphotography.net/8-bit-vs-16-bit-color-depth-use-matters/" rel="external nofollow noopener noreferrer" target="_blank">8-bit vs 16-bit - What Color Depth You Should Use And Why It Matters - DIY Photography</a></li></ul></li></ul></li></ul><ul><li><p><strong>使用矢量图像 VS 栅格/位图：</strong>  可以的话，推荐使用矢量图像而不是位图图像。</p><p> <em>为什么：</em></p><blockquote><p>矢量图像（SVG）往往比图像小，具有响应性和完美缩放功能。而且这些图像可以通过CSS进行动画和修改操作。</p></blockquote></li></ul><ul><li><p><strong>图像尺寸：</strong>  如果已知最终渲染图像大小，请在<img>上设置宽度和高度属性。</p><p> <em>为什么：</em></p><blockquote><p>如果设置了高度和宽度，则在加载页面时会保留图像所需的空间。如果没有这些属性，浏览器就不知道图像的大小，也无法为其保留适当的空间，导致页面布局在加载期间发生变化。</p></blockquote></li><li><p><strong>避免使用Base64图像：</strong>  你可以将微小图像转换为base64，但实际上并不是最佳实践。</p><ul><li>📖 <a href="https://csswizardry.com/2017/02/base64-encoding-and-performance/" rel="external nofollow noopener noreferrer" target="_blank">Base64 Encoding &amp; Performance, Part 1 and 2 by Harry Roberts</a></li><li>📖 <a href="http://www.andygup.net/a-closer-look-at-base64-image-performance/" rel="external nofollow noopener noreferrer" target="_blank">A closer look at Base64 image performance – The Page Not Found Blog</a></li><li>📖 <a href="https://www.davidbcalhoun.com/2011/when-to-base64-encode-images-and-when-not-to/" rel="external nofollow noopener noreferrer" target="_blank">When to base64 encode images (and when not to) | David Calhoun</a><ul><li>📖 <a href="https://varvy.com/pagespeed/base64-images.html" rel="external nofollow noopener noreferrer" target="_blank">Base64 encoding images for faster pages | Performance and seo factors</a></li></ul></li></ul></li><li><p><strong>懒加载：</strong>  图像懒加载（始终提供noscript作为后备方案）。</p><p> <em>为什么：</em></p><blockquote><p>它能改善当前页面的响应时间，避免加载一些用户可能不需要或不必要的图像。</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>使用<a href="https://developers.google.com/web/tools/lighthouse/" rel="external nofollow noopener noreferrer" target="_blank">Lighthouse</a>可以识别屏幕外的图像数量。<br>使用懒加载图像的JavaScript插件。</p></blockquote><ul><li>🛠 <a href="https://github.com/verlok/lazyload" rel="external nofollow noopener noreferrer" target="_blank">verlok/lazyload: Github</a></li><li>📖 <a href="https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/" rel="external nofollow noopener noreferrer" target="_blank">Lazy Loading Images and Video  |  Web Fundamentals  |  Google Developers</a></li><li>📖 <a href="http://blog.dynamicdrive.com/5-brilliant-ways-to-lazy-load-images-for-faster-page-loads/" rel="external nofollow noopener noreferrer" target="_blank">5 Brilliant Ways to Lazy Load Images For Faster Page Loads - Dynamic Drive Blog</a></li></ul></li><li><p><strong>响应式图像：</strong>  确保提供接近设备显示尺寸的图像。</p><p> <em>为什么：</em></p><blockquote><p>小型设备不需要比视口大的图像。建议在不同尺寸上使用一个图像的多个版本。</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>为不同的设备设置不同大小的图像。<br>使用srcset和picture为每个图像提供多种变体（variants）。</p></blockquote><ul><li>📖 <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images" rel="external nofollow noopener noreferrer" target="_blank">Responsive images - Learn web development | MDN</a></li></ul></li></ul><h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><ul><li><p><strong>页面大小 &lt; 1500 KB:</strong>  (理想情况 &lt; 500 KB) 尽可能减少页面和资源的大小。</p><p> <em>为什么：</em></p><blockquote><p>理想情况下，应该尝试让页面大小&lt;500 KB，但Web页面大小中位数大约为1500 KB（即使在移动设备上）。根据你的目标用户、连接速度、设备，尽可能减少页面大小以尽可能获得最佳用户体验非常重要。</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>前端性能清单中的所有规则将帮助你尽可能地减少资源和代码。</p></blockquote><ul><li>📖 <a href="https://httparchive.org/reports/page-weight#bytesTotal" rel="external nofollow noopener noreferrer" target="_blank">Page Weight</a></li><li>🛠 <a href="https://whatdoesmysitecost.com/" rel="external nofollow noopener noreferrer" target="_blank">What Does My Site Cost?</a></li></ul></li></ul><ul><li><p><strong>Cookie 大小:</strong>  如果您使用cookie，请确保每个cookie不超过4096字节，并且一个域名下不超过20个cookie。</p><p> <em>为什么：</em></p><blockquote><p>cookie存在于HTTP头中，在Web服务器和浏览器之间交换。保持cookie的大小尽可能低是非常重要的，以尽量减少对用户响应时间的影响。</p></blockquote><p> <em>怎么做：</em></p><blockquote><p>消除不必要的cookie</p></blockquote><ul><li>📖 <a href="https://tools.ietf.org/html/rfc6265" rel="external nofollow noopener noreferrer" target="_blank">Cookie specification: RFC 6265</a></li><li>📖 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies" rel="external nofollow noopener noreferrer" target="_blank">Cookies</a></li><li>🛠 <a href="http://browsercookielimits.squawky.net/" rel="external nofollow noopener noreferrer" target="_blank">Browser Cookie Limits</a></li><li>📖 <a href="http://www.monitis.com/blog/website-performance-cookies-dont-taste-so-good/" rel="external nofollow noopener noreferrer" target="_blank">Website Performance: Cookies Don’t Taste So Good - Monitis Blog</a></li><li>📖 <a href="https://www.globaldots.com/googles-web-performance-best-practices-3-minimize-request-overhead/" rel="external nofollow noopener noreferrer" target="_blank">Google’s Web Performance Best Practices #3: Minimize Request Overhead - GlobalDots Blog</a></li></ul></li></ul><ul><li><p><strong>最小化HTTP请求：</strong>  始终确保所请求的每个文件对网站或应用程序至关重要，尽可能减少http请求。</p></li><li><p><strong>使用CDN提供静态文件：</strong>  使用CDN可以更快地在全球范围内获取到你的静态文件。</p><ul><li>📖 <a href="https://www.cdnplanet.com/blog/10-tips-optimize-cdn-performance/" rel="external nofollow noopener noreferrer" target="_blank">10 Tips to Optimize CDN Performance - CDN Planet</a></li><li>📖 <a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching" rel="external nofollow noopener noreferrer" target="_blank">HTTP Caching  |  Web Fundamentals  |  Google Developers</a></li></ul></li><li><p><strong>正确设置HTTP缓存标头：</strong>  合理设置HTTP缓存标头来减少http请求次数。</p></li><li><p><strong>启用GZIP压缩</strong> </p><ul><li>📖 <a href="https://checkgzipcompression.com/" rel="external nofollow noopener noreferrer" target="_blank">Check GZIP compression</a></li></ul></li><li><p><strong>分域存放资源：</strong>  由于浏览器同一域名并行下载数有限，利用多域名主机存放静态资源，增加并行下载数，缩短资源加载时间</p></li><li><p><strong>减少页面重定向</strong>  </p></li></ul><p> 以上清单仅为节选，来源 <a href="https://github.com/w3cay/Front-End-Performance-Checklist" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/w3cay/Front-End-Performance-Checklist</a></p>]]></content>
    
    <summary type="html">
    
      网页加载速度是衡量一个网页好坏的重要标准，网页遗弃率随网页加载时间的增加而增加
    
    </summary>
    
    
      <category term="web性能" scheme="https://w3cay.com/tags/web%E6%80%A7%E8%83%BD/"/>
    
      <category term="web技术" scheme="https://w3cay.com/tags/web%E6%8A%80%E6%9C%AF/"/>
    
      <category term="web加速" scheme="https://w3cay.com/tags/web%E5%8A%A0%E9%80%9F/"/>
    
  </entry>
  
  <entry>
    <title>读 《精进，如何成为一个很厉害的人》 有感</title>
    <link href="https://w3cay.com/post/2450bc1.html"/>
    <id>https://w3cay.com/post/2450bc1.html</id>
    <published>2018-08-18T16:03:52.000Z</published>
    <updated>2023-08-19T10:39:38.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引语"><a href="#引语" class="headerlink" title="引语"></a>引语</h2><p> 之前花了一些时间把《精进，如何成为一个很厉害的人》读完了，首次看到这个书名，想着这书应该类似那种成功学的书，看了一些，虽然确实（像）是成功学，但是里面作者所描述的思想和价值观还是很中肯和值得揣摩的。所以对于一些我比较认同的和感兴趣的点，我把它提取出来，分享出来</p><h2 id="文摘"><a href="#文摘" class="headerlink" title="文摘"></a>文摘</h2><blockquote><p> 一个人如何对待他的时间，决定了他可以成为什么样的人</p></blockquote><p>每个人的生命时间都是有限的，在有限的时间里做有意义的事情，国家有5年计划，为何我们不能有？计划可以让你更有目的的去生活，制定自己的计划，利用好时间，活成自己想要的样子</p><blockquote><p>在分析一件事情值不值得做或者需要花精力去做的时候，一方面可以先想想这件事给我带来的收益大小，比如可以是心智、情感层面，也可以是身体、物质层面的，另一方面，看这个收益能影响多长的时间，或者叫“收益半衰期”</p></blockquote><p>每个人的时间都是成本的，虽然不是商人，那也要考虑收益，要把自己当做投资人</p><blockquote><p>侯世达定律：实际做事花费的时间总是比预期要长，即使预期中考虑了侯世达定律</p></blockquote><p>作为技术人员，这个定律一定是深入人心，排期再怎么详尽和合理，但是因为这个世界存在很多的不确定因子，突发事件是你无法预测的，所以只能尽力去完成你的预期，如果定期完成了，那是件值得庆幸的事</p><blockquote><p>牛人总是在前瞻性思维和总结性思维上都非常出色，他们既能提前设想未来事件中可能出现的方方面面的情形，又能从已经发生的行动中加以反思，因此他们总是比一般人想得更加深入和周全</p></blockquote><p>我的总结 “向前看、向后看、低头看”</p><blockquote><p>从理论出发不一定能指导实践，只有在实践中通过反思积累的知识才能指导</p></blockquote><p>不论学习什么东西，肯定是参与其中实践，才能看清你所要学习的内容的本质，或者说更好的帮助你的理解</p><blockquote><p>独特性，就是最好的竞争力，请坚持你的与众不同</p></blockquote><p>如果学的东西 （输入） 和 做的东西 （输出） 和别人都一样，没有任何独到和与众不同的东西，那么你就会被淹没在乌央乌央的人群中，所以看到什么东西，要先自己思考，然后参考别人的东西，然后在反复思考验证中得到你的东西</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>作者从时间、学习、思维方式、技能等方面描述了一个人如何成为一个厉害的人，总体感觉不错，部分内容感觉还没参透或有些枯燥，我只摘选了小部分内容，有兴趣的人可以自己看一下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引语&quot;&gt;&lt;a href=&quot;#引语&quot; class=&quot;headerlink&quot; title=&quot;引语&quot;&gt;&lt;/a&gt;引语&lt;/h2&gt;&lt;p&gt; 之前花了一些时间把《精进，如何成为一个很厉害的人》读完了，首次看到这个书名，想着这书应该类似那种成功学的书，看了一些，虽然确实（像）是
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://w3cay.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="文摘" scheme="https://w3cay.com/tags/%E6%96%87%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>React可配置中国城市列表选择组件</title>
    <link href="https://w3cay.com/post/f3a657ac.html"/>
    <id>https://w3cay.com/post/f3a657ac.html</id>
    <published>2018-08-05T08:22:12.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="react-city-select"><a href="#react-city-select" class="headerlink" title="react-city-select"></a><a href="https://github.com/w3cay/react-city-select" rel="external nofollow noopener noreferrer" target="_blank">react-city-select</a></h3><p>基于 React 的可配置化城市列表选择组件</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gz8ur1zrpvj30hh0vbabp.jpg" alt></p><p>demo: <a href="https://w3cay.com/react-city-select/example/">https://w3cay.com/react-city-select/example/</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>npm i react-city-select 或 yarn add react-city-select</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre><code class="javascript">...// 引入 CitySelect 组件import CitySelect from &#39;react-city-select&#39;;// 引入数据import data from &#39;./data.json&#39;;// 引入图标路径import iconSrc from &#39;./location_icon@2x.png&#39;;export default class APP extends React.Component {  constructor(props) {    super(props);    this.state = {      // 结构化城市列表数据      citysData: data.indexCitys,       // 对某项数据定制化配置      config: {        pos: {          icon: iconSrc, // 游标图标          title: &#39;定位城市&#39;,        },        hot: {          title: &#39;热门城市&#39;,          key: &#39;热门&#39;,          style: &#39;grid&#39;, // 展示形式（ line || grid）        }      }    };  }  // 选中城市回调  handleSelectCity(cityData) {    console.log(&#39;选中数据项:&#39;, cityData);  }  render() {    return (      &lt;CitySelect        // 传入数据        data={this.state.citysData}        // 传入配置        config={this.state.config}        // 传入回调        onSelectItem={this.handleSelectCity.bind(this)}&gt;      &lt;/CitySelect&gt;    )  }}</code></pre><h3 id="props-参数"><a href="#props-参数" class="headerlink" title="props 参数"></a>props 参数</h3><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>必填；对象；</td><td>城市组件数据JSON对象</td></tr><tr><td>config</td><td>可选；对象；</td><td>配置或覆盖某个 key 下的值，详情见下表</td></tr><tr><td>onSelectItem</td><td>必填；函数；</td><td>点击单元格数据回调</td></tr></tbody></table><h3 id="config-参数"><a href="#config-参数" class="headerlink" title="config 参数"></a>config 参数</h3><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>config[‘sec-key’][‘title’]</td><td>可选；字符串；</td><td>索引标题</td></tr><tr><td>config[‘sec-key’][‘key’]</td><td>可选；字符串；</td><td>游标标题</td></tr><tr><td>config[‘sec-key’][‘icon’]</td><td>可选；字符串；</td><td>游标图标（替代标题）</td></tr><tr><td>config[‘sec-key’][‘style’]</td><td>可选；字符串；(line或grid)</td><td>数据项展示方式</td></tr></tbody></table><p>sec-key : 对象key</p><h3 id="data-数据格式"><a href="#data-数据格式" class="headerlink" title="data 数据格式"></a>data 数据格式</h3><pre><code class="JSON">// 定位数据项&quot;pos&quot;: [{  &quot;id&quot;: &quot;110100&quot;,  &quot;name&quot;: &quot;北京&quot;}],// 热门数据项&quot;hot&quot;: [{    &quot;id&quot;: &quot;110100&quot;,    &quot;name&quot;: &quot;北京&quot;  },  {    &quot;id&quot;: &quot;120100&quot;,    &quot;name&quot;: &quot;天津&quot;  },  {    &quot;id&quot;: &quot;130100&quot;,    &quot;name&quot;: &quot;石家庄&quot;  }],// 字母数据项&quot;A&quot;: [{    &quot;id&quot;: &quot;152900&quot;,    &quot;name&quot;: &quot;阿拉善盟&quot;  },  {    &quot;id&quot;: &quot;210300&quot;,    &quot;name&quot;: &quot;鞍山&quot;  }],&quot;B&quot;: [{    &quot;id&quot;: &quot;110100&quot;,    &quot;name&quot;: &quot;北京&quot;  },  {    &quot;id&quot;: &quot;130600&quot;,    &quot;name&quot;: &quot;保定&quot;  }]...</code></pre><p> Github 仓库地址： <a href="https://github.com/w3cay/react-city-select" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/w3cay/react-city-select</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;react-city-select&quot;&gt;&lt;a href=&quot;#react-city-select&quot; class=&quot;headerlink&quot; title=&quot;react-city-select&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/w3cay/r
      
    
    </summary>
    
    
      <category term="React组件" scheme="https://w3cay.com/tags/React%E7%BB%84%E4%BB%B6/"/>
    
      <category term="react" scheme="https://w3cay.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React事件回调函数bind(this)解析</title>
    <link href="https://w3cay.com/post/574dfb59.html"/>
    <id>https://w3cay.com/post/574dfb59.html</id>
    <published>2018-07-27T10:23:25.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 React 的过程中（ES6 Class 语法下），我一直很疑惑一件事情，那就是事件的绑定，比如 onClick、onChange 的事件处理函数必须这样写</p><pre><code class="html">&lt;button onClick={this.handleClick.bind(this)}&gt;点击&lt;/button&gt;</code></pre><p>或者在 constructor 函数中声明</p><pre><code class="js">this.handleClick = this.handleClick.bind(this);</code></pre><h3 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h3><p>为什么明明是使用的是 <strong>this</strong> 下面的函数，还要绑定 <strong>bind</strong> 一下 this 呢? 就好比『我想用自己的手机还要声明下这是我的手机』，不说写法是否正确，自我感觉代码的可读性和美观度都不佳</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>Javascript 是一种比较特殊的语言，说起这个问题要从作用域谈起，首先，JavaScript 是只有静态作用域的，没有动态作用域，或许有人说 this 不是吗？NO，它只是像而已</p><p>顾名思义，静态作用域就是说作用域由你的代码书写位置决定的，而动态作用域的作用域是调用执行的时候确定的，没错 this 就是这样的</p><p>this 的作用就是找到函数被调用所绑定的位置，那么位置寻找是有规则的，下面是四条寻找规则</p><p>一、 默认绑定<br>默认绑定，顾名思义，就是无法应用其它规则的时候使用的绑定规则，这种规则也是函数中最常用的，叫做<strong>独立函数调用</strong>，例如：</p><pre><code class="js">function foo() {   console.log( this.a );}var a = 2; foo(); // 2</code></pre><p><strong>foo</strong> 不带任何修饰的函数引用进行调用，只能使用默认绑定规则<br>这时，<strong>this</strong> 的指向默认是全局作用域，即 <strong>window</strong> ,当然是在非严格模式下。在严格模式下就会是 <strong>undefined</strong></p><p>二、 隐式绑定<br>还有一种情况，函数存在于对象中，被对象所引用，例如</p><pre><code class="js">function foo() {   console.log( this.a );}var obj = {   a: 2,  foo: foo };obj.foo(); // 2</code></pre><p>这种情况 <strong>this</strong> 绑定的就是 obj， 因为函数存在于对象之中，并且被该对象所调用。<br>即使 foo 函数存在于对象内部，但有时也会找不到它的上下文，比如</p><pre><code class="js">function foo() {   console.log( this.a );}var obj = {   a: 2,  foo: foo };//将 foo 函数赋值给一个变量var bar = obj.foo; bar(); // undefined</code></pre><p>此时，函数 bar 是对 obj.foo 的一个引用，严格来说，跟对象 obj 没有任何关系，此时 bar 的执行就可以运用默认绑定规则，所以它的上下文this 指向 window 或者 undefined</p><p>还有一种情况，就是在回调函数中引用，也会出现找不到上下文，造成 this 绑定丢失</p><pre><code class="js">function foo() {   console.log( this.a );}var a = &#39;window a&#39;;var obj = {   a: &#39;obj a&#39;,  foo: foo };// obj.foo 通过参数传递给 setTimeout setTimeout( obj.foo, 100 ); </code></pre><p>此时 this 绑定丢失, 就会应用默认绑定，找到 window</p><p>三、 显式绑定<br>显示绑定是通过 call(..) 和 apply(..) 方法，强制将 this 指向传入的对象，这种方式也叫做硬绑定</p><pre><code class="js">function foo(something) {    console.log(this.a, something);    return this.a + something;}var obj = {    a: 2};var bar = function() {    return foo.apply(obj, arguments);};var b = bar(3);console.log( b ); // 5</code></pre><p>四、new 绑定<br>new 通常是使用一个函数来构造一个对象，并且该函数中所指向的 this 会绑定在这个对象上，举个栗子 🌰</p><pre><code class="js">function foo(a) {    this.a = a;}var bar = new foo(2);console.log(bar.a); // 2</code></pre><p>使用 new 来调用 foo(..) 时，我们会构造一个新对象 bar 并把它绑定到 foo(..) 调用中的 this 上</p><p>new 是最后一种可以影响函数调用时 this 绑定行为的方法，我们称之为 new 绑定</p><p>那么综上所述， React 这个情况就很好理解了</p><pre><code class="html">&lt;button onClick={this.handleClick.bind(this)}&gt;点击&lt;/button&gt;</code></pre><p><strong>this.handleClick 方法是通过回调函数传参执行的，而在 Class 语法中并没有默认做一个当前 this 绑定，所以会丢失 this 的绑定，在严格模式下，this 是 undefined</strong></p><p>Function.prototype.bind() 是函数自带的绑定上下文方法， 与 call(..) 和 apply(..) 功能相似，bind(this) 之后会创建一个新的函数，并且 this 绑定在当前想要的地方</p><p>React 文档对此问题描述：</p><p><strong>You have to be careful about the meaning of this in JSX callbacks. In JavaScript, class methods are not bound by default. If you forget to bind this.handleClick and pass it to onClick, this will be undefined when the function is actually called.</strong></p><h3 id="替代"><a href="#替代" class="headerlink" title="替代"></a>替代</h3><p>当然，this.handleClick.bind(this) 这种写法是有其它替代写法的，主要有两种</p><p>第一种，可以使用箭头函数，因为箭头函数是属于静态作用域的，所以 this 会直接绑定在当前作用域</p><pre><code class="js"> &lt;button onClick={(e) =&gt; this.handleClick(e)}&gt;</code></pre><p>第二种，使用 <a href="https://babeljs.io/docs/en/babel-plugin-transform-class-properties/" rel="external nofollow noopener noreferrer" target="_blank">public class fields</a> 语法，这样就不需要每次绑定 this，可以直接使用，当然这个规范还在实验阶段，需要通过 babel进行编译执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用 React 的过程中（ES6 Class 语法下），我一直很疑惑一件事情，那就是事件的绑定，比如 onClick、onChange 的事件处理函数必须这样写&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;button onClick={this.h
      
    
    </summary>
    
    
      <category term="React" scheme="https://w3cay.com/tags/React/"/>
    
      <category term="Javascript" scheme="https://w3cay.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>常用HTTP状态码趣(曲)解</title>
    <link href="https://w3cay.com/post/bb79b996.html"/>
    <id>https://w3cay.com/post/bb79b996.html</id>
    <published>2018-07-08T11:56:00.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP 状态码算是很基础的知识，但是想要记住却不是那么容易的事情，根据我自己的学习和对HTTP状态码的趣(曲)解，为大家编排一个节目</p><h1 id="Action！"><a href="#Action！" class="headerlink" title="Action！"></a>Action！</h1><h1 id="第-1XX-回"><a href="#第-1XX-回" class="headerlink" title="第 1XX 回"></a>第 1XX 回</h1><h3 id="100-：-Continue（继续）"><a href="#100-：-Continue（继续）" class="headerlink" title="100 ： Continue（继续）"></a>100 ： Continue（继续）</h3><h1 id="😏-▶️-▶️-▶️-😌"><a href="#😏-▶️-▶️-▶️-😌" class="headerlink" title="😏  ▶️ ▶️ ▶️ 😌"></a>😏  ▶️ ▶️ ▶️ 😌</h1><p>小客：😏 你好，小服，我。。。</p><p>小服：😌 你好！小客，想说啥，快说！</p><h3 id="101-：-Switching-Protocols-（切换协议）"><a href="#101-：-Switching-Protocols-（切换协议）" class="headerlink" title="101 ： Switching Protocols （切换协议）"></a>101 ： Switching Protocols （切换协议）</h3><h1 id="😏-▶️-▶️-▶️-😊"><a href="#😏-▶️-▶️-▶️-😊" class="headerlink" title="😏  ▶️ ▶️ ▶️ 😊"></a>😏  ▶️ ▶️ ▶️ 😊</h1><p>小客：😏 你好，小服，我们换 QQ 聊吧，微信传文件不方便</p><p>小服：😊 好的，马上换</p><h1 id="第-2XX-回"><a href="#第-2XX-回" class="headerlink" title="第  2XX 回"></a>第  2XX 回</h1><h3 id="200-：-OK（成功）"><a href="#200-：-OK（成功）" class="headerlink" title="200 ： OK（成功）"></a>200 ： OK（成功）</h3><h1 id="😏-▶️-▶️-▶️-😊-1"><a href="#😏-▶️-▶️-▶️-😊-1" class="headerlink" title="😏  ▶️ ▶️ ▶️ 😊"></a>😏  ▶️ ▶️ ▶️ 😊</h1><p>小客：😏 你好，小服，我要找这个图片</p><p>小服：😊 好的，给你</p><h3 id="206-：-Partial-Content（部分内容）"><a href="#206-：-Partial-Content（部分内容）" class="headerlink" title="206 ： Partial Content（部分内容）"></a>206 ： Partial Content（部分内容）</h3><h1 id="😏-▶️-▶️-▶️-😊-2"><a href="#😏-▶️-▶️-▶️-😊-2" class="headerlink" title="😏  ▶️ ▶️ ▶️ 😊"></a>😏  ▶️ ▶️ ▶️ 😊</h1><p>小客：😏 小服，把这个视频前半段先发给我</p><p>小服：😊 好的，给你</p><h1 id="第-3XX-回"><a href="#第-3XX-回" class="headerlink" title="第 3XX 回"></a>第 3XX 回</h1><h3 id="301：-Moved-Permanently-（永久转移）"><a href="#301：-Moved-Permanently-（永久转移）" class="headerlink" title="301： Moved Permanently （永久转移）"></a>301： Moved Permanently （永久转移）</h3><h1 id="😏-▶️-▶️-▶️-😌-1"><a href="#😏-▶️-▶️-▶️-😌-1" class="headerlink" title="😏  ▶️ ▶️ ▶️ 😌"></a>😏  ▶️ ▶️ ▶️ 😌</h1><p>小客：😏 你好，小服，我要找这个图片</p><p>小服：😌 不好意思，这张图已经不在这里了，我给你个新地址，你去那找吧，以后你就按照这个地址去找吧</p><h3 id="302：-Move-temporarily-（暂时转移）"><a href="#302：-Move-temporarily-（暂时转移）" class="headerlink" title="302： Move temporarily （暂时转移）"></a>302： Move temporarily （暂时转移）</h3><h1 id="😏-▶️-▶️-▶️-😌-2"><a href="#😏-▶️-▶️-▶️-😌-2" class="headerlink" title="😏  ▶️ ▶️ ▶️ 😌"></a>😏  ▶️ ▶️ ▶️ 😌</h1><p>小客：😏 你好，小服，我要找这个图片</p><p>小服：😌 不好意思，这张图暂时移走了，我给你个地址，你在那找找</p><h3 id="304-Not-Modified（未修改）"><a href="#304-Not-Modified（未修改）" class="headerlink" title="304 Not Modified（未修改）"></a>304 Not Modified（未修改）</h3><h1 id="😏-▶️-▶️-▶️-😌-3"><a href="#😏-▶️-▶️-▶️-😌-3" class="headerlink" title="😏  ▶️ ▶️ ▶️ 😌"></a>😏  ▶️ ▶️ ▶️ 😌</h1><p>小客：😏 你好，小服，我要找这个图片</p><p>小服：😌 咦？上次不是给过你了？这个图片没有更新，你就用原来的就行</p><h1 id="第-4XX-回"><a href="#第-4XX-回" class="headerlink" title="第  4XX 回"></a>第  4XX 回</h1><h3 id="400-Bad-Request（错误请求）"><a href="#400-Bad-Request（错误请求）" class="headerlink" title="400 Bad Request（错误请求）"></a>400 Bad Request（错误请求）</h3><h1 id="😏-▶️-▶️-▶️-😑"><a href="#😏-▶️-▶️-▶️-😑" class="headerlink" title="😏  ▶️ ▶️ ▶️ 😑"></a>😏  ▶️ ▶️ ▶️ 😑</h1><p>小客：😏 你好，小服， <em>#$%^&amp;(</em>&amp;*&amp;！@&amp;~ </p><p>小服：😑 嗯？请说人话！</p><h3 id="401-Unauthorized（未授权）"><a href="#401-Unauthorized（未授权）" class="headerlink" title="401 Unauthorized（未授权）"></a>401 Unauthorized（未授权）</h3><h1 id="😏-▶️-▶️-▶️-🤔"><a href="#😏-▶️-▶️-▶️-🤔" class="headerlink" title="😏  ▶️ ▶️ ▶️ 🤔"></a>😏  ▶️ ▶️ ▶️ 🤔</h1><p>小客：😏 你好，小服，我要找这个图片</p><p>小服：🤔 不好意思，请出示您的身份证。。</p><p>小客：☹️ *@$%^&amp;</p><h3 id="403-Forbidden（拒绝访问）"><a href="#403-Forbidden（拒绝访问）" class="headerlink" title="403 Forbidden（拒绝访问）"></a>403 Forbidden（拒绝访问）</h3><h1 id="😏-▶️-▶️-▶️-🤐"><a href="#😏-▶️-▶️-▶️-🤐" class="headerlink" title="😏  ▶️ ▶️ ▶️ 🤐"></a>😏  ▶️ ▶️ ▶️ 🤐</h1><p>小客：😏 你好，小服，我要找这个图片</p><p>小服：☹️ 拒绝！</p><h3 id="404-Not-Found（未找到）"><a href="#404-Not-Found（未找到）" class="headerlink" title="404 Not Found（未找到）"></a>404 Not Found（未找到）</h3><h1 id="😏-▶️-▶️-▶️-😲"><a href="#😏-▶️-▶️-▶️-😲" class="headerlink" title="😏  ▶️ ▶️ ▶️ 😲"></a>😏  ▶️ ▶️ ▶️ 😲</h1><p>小客：😏 你好，小服，我要找这个图片</p><p>小服：😲 我。。找不到了</p><h1 id="第-5XX-回"><a href="#第-5XX-回" class="headerlink" title="第 5XX 回"></a>第 5XX 回</h1><h3 id="500-Internal-Server-Error（服务错误）"><a href="#500-Internal-Server-Error（服务错误）" class="headerlink" title="500 Internal Server Error（服务错误）"></a>500 Internal Server Error（服务错误）</h3><h1 id="😏-▶️-▶️-▶️-😷"><a href="#😏-▶️-▶️-▶️-😷" class="headerlink" title="😏  ▶️ ▶️ ▶️ 😷"></a>😏  ▶️ ▶️ ▶️ 😷</h1><p>小客： 😏 你好，小服，我要找这个图片</p><p>小服： 😷 生病了，不想说话</p><h3 id="503-Service-Unavailable（服务不可用）"><a href="#503-Service-Unavailable（服务不可用）" class="headerlink" title="503 Service Unavailable（服务不可用）"></a>503 Service Unavailable（服务不可用）</h3><h1 id="😏-▶️-▶️-▶️-💀"><a href="#😏-▶️-▶️-▶️-💀" class="headerlink" title="😏  ▶️ ▶️ ▶️ 💀"></a>😏  ▶️ ▶️ ▶️ 💀</h1><p>小客： 😏 你好，小服，我要找这个图片</p><p>小服： 💀 卒</p><h3 id="504-Gateway-Timeout（网关超时）"><a href="#504-Gateway-Timeout（网关超时）" class="headerlink" title="504 Gateway Timeout（网关超时）"></a>504 Gateway Timeout（网关超时）</h3><h1 id="😠-▶️-▶️-▶️-😴"><a href="#😠-▶️-▶️-▶️-😴" class="headerlink" title="😠  ▶️ ▶️ ▶️ 😴"></a>😠  ▶️ ▶️ ▶️ 😴</h1><p>小客：😠 小服，小服？我要找这个图片，怎么不搭理我啊？</p><p>小服：😴</p><h1 id="完"><a href="#完" class="headerlink" title="完"></a>完</h1><p>感谢大家的观看 </p><p>字幕滚起来 ~</p><p>…</p><p>友情出演</p><p>😏 奸笑帝 饰 （小客）</p><p>😊 表情帝 饰 （小服）</p><p>…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP 状态码算是很基础的知识，但是想要记住却不是那么容易的事情，根据我自己的学习和对HTTP状态码的趣(曲)解，为大家编排一个节目&lt;/p&gt;
&lt;h1 id=&quot;Action！&quot;&gt;&lt;a href=&quot;#Action！&quot; class=&quot;headerlink&quot; title=&quot;Act
      
    
    </summary>
    
    
      <category term="HTTP" scheme="https://w3cay.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>React禁止页面滚动踩坑实践与方案梳理</title>
    <link href="https://w3cay.com/post/dc49b55.html"/>
    <id>https://w3cay.com/post/dc49b55.html</id>
    <published>2018-07-02T15:09:08.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用 React 技术栈重构一个单页应用，其中有个页面是实现城市选择功能，主要是根据城市的首字母来快速跳转到相应位置，比较类似原生 APP 中的电话联系人查找功能，页面如图<br><img src="/images/scroll-issue/2250902-8418da4d28a9107e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="功能界面"></p><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><p>在上下滑动右侧 fixed 定位的元素时，页面会跟着一起滑动</p><p><img src="/images/scroll-issue/2250902-c0ed1030d3fc5d08.gif?imageMogr2/auto-orient/strip" alt="滚动右侧整个页面跟着滚动"></p><p>当然这个现象在开发过程中应该会经常遇到，比如弹起 modal 框时，如果 modal框的内容高度小于框高度，滑动内容也会导致页面跟着滑动， 那么在 React 中像往常一样处理</p><pre><code class="html">&lt;div className=&quot;nonius&quot;  id=&quot;nonius&quot;  onTouchStart={this.sidebarTouchStart.bind(this)}  onTouchMove={this.sidebarTouchMove.bind(this)}  onTouchEnd={this.sidebarTouchEnd.bind(this)}&gt;</code></pre><p>使用 React 提供的事件绑定机制，分别绑定三个 handler ，在  onTouchMove 事件中，我希望通过 preventDefault 能够阻止父级元素的滚动</p><pre><code class="js">sidebarTouchMove(e) {  e.preventDefault();  ...}</code></pre><p>但实际的反馈却事与愿违，在调试中，我发现 Chrome 是有警告的，并且没有达到想要的效果<br><img src="/images/scroll-issue/2250902-74d74a702fbd05a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="chorme 开发工具警告提示"></p><p>根据警告提示，找到的原因是</p><blockquote><p>AddEventListenerOptions defaults passive to false. With this change touchstart and touchmove listeners added to the document will default to passive:true (so that calls to preventDefault will be ignored)..<br> If the value is explicitly provided in the AddEventListenerOptions it will continue having the value specified by the page.<br> This is behind a flag starting in Chrome 54, and enabled by default in Chrome 56. See <a href="https://developers.google.com/web/updates/2017/01/scrolling-intervention" rel="external nofollow noopener noreferrer" target="_blank">https://developers.google.com/web/updates/2017/01/scrolling-intervention</a></p></blockquote><p>来源: <a href="https://www.chromestatus.com/features/5093566007214080" rel="external nofollow noopener noreferrer" target="_blank">https://www.chromestatus.com/features/5093566007214080</a></p><p>根据 chrome 的提示得知，是因为 Chrome 现在默认把通过在 document 上绑定的事件监听器 passive 属性默认置为 true，这样就会导致我设置的  e.preventDefault() 被忽视了。当然 Chrome 的这个做法是有道理，是为了提高页面滚动的性能，那么为了防止带来的副作用，官方考虑的很周到，给我们提供了一个 CSS 属性专门用来解决这个问题</p><pre><code class="css">#fixed-div {  touch-action: none;}</code></pre><blockquote><p>In rare cases this change can result in unintended scrolling. This is usually easily addressed by applying a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action" rel="external nofollow noopener noreferrer" target="_blank">touch-action</a>: nonestyle to the element where scrolling shouldn’t occur.</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" rel="external nofollow noopener noreferrer" target="_blank">https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action</a></p><p>加上了这个属性，感觉世界总算和平了，But！在 ios 系统上测试发现，这个属性 x 用没有，查了下 Can I Use<br><img src="/images/scroll-issue/2250902-7ce4d43eec6721f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="can i use 截图"></p><p>查询得知这个属性只在 Chrome 安卓等机型下是支持的，ios却用不了。既然不兼容，那只能降级处理了，为了保证良好的功能体验，感觉是还要从 passive 上做处理，说到 passive 根据 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners" rel="external nofollow noopener noreferrer" target="_blank">MDN文档：addEventListener</a> 的介绍，为了提高页面滚动性能，大多浏览器都默认把 touchstart 和 touchmove 在文档元素上直接注册的这个事件监听器属性设置成 passive：true ，而通过 AddEventListener 注册的事件依然没有变化</p><p>既然现在默认将事件 passive 的属性默认设置为 true, 那我就显式设置为 false 好了，查遍 React 的文档，也没发现事件监听器可以支持配置这个属性的，在 github 上发现这个帖子 <a href="https://github.com/facebook/react/issues/6436" rel="external nofollow noopener noreferrer" target="_blank">Support Passive Event Listeners #6436 </a> 目前看依然是 open 状态的，现在不确定有没有支持这个属性</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>既然这样，只能单独对 touchmove 通过 AddEventListener 方法去注册事件监听了</p><pre><code class="js">// 为元素添加事件监听   document.getElementById(&#39;nonius&#39;).addEventListener(&quot;touchmove&quot;, (e) =&gt; {  // 执行滚动回调  this.sidebarTouchMove(e)}, {  passive: false //  禁止 passive 效果})</code></pre><p> 加上这个方法后，this.sidebarTouchMove(e) 方法中的     e.preventDefault() 方法就可以正常使用了，而且没有警告提示，问题到此就算解决了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结下，这里的坑主要是 chrome 和 safari 平台的标准不统一导致的，新的标准出台，其它宿主环境不能很好的支持，当然 react 官方对这个属性的支持也比较慢，同样的前端 UI 框架 Vue  就处理的很棒<br><img src="/images/scroll-issue/2250902-12cacb6e99c0daf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vue对passive属性支持的相关语法"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在使用 React 技术栈重构一个单页应用，其中有个页面是实现城市选择功能，主要是根据城市的首字母来快速跳转到相应位置，比较类似原生 APP 中的电话联系人查找功能，页面如图&lt;br&gt;&lt;img src=&quot;/images/scroll-issue/2250902-8418d
      
    
    </summary>
    
    
      <category term="React" scheme="https://w3cay.com/tags/React/"/>
    
      <category term="Javascript" scheme="https://w3cay.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>APP技术选型之微信小程序</title>
    <link href="https://w3cay.com/post/2be9b7d1.html"/>
    <id>https://w3cay.com/post/2be9b7d1.html</id>
    <published>2018-07-01T15:24:29.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<p>作为一枚开发人员，选择开发一款产品之前，我们肯定会进行一个技术上的选型，什么模式的开发更适合，能够更高效，或者更适合这个产品的特性？</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>首先，目前开发一个产品主流上大致有5种开发模式，包括 Native APP 原生应用、WebAPP 网页应用、Hybrid App 混合式开发、ReactNative、轻应用小程序，那么这几种开发模式有什么区别？开发模式是如何演进的呢？如图<br><img src="https://upload-images.jianshu.io/upload_images/2250902-0962ee68cdd4a8cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="APP开发模式演进"></p><p>首先开发一款 APP，如果注重性能，不需要过多的动态内容，可以选择原生应用来开发。如果性能要求不高，只是需要点开即用，那么 WebAPP 即可满足。如果这两种要求都必须满足，那么 Hybrid App 混合式的开发是一种折中的方法，将两者优势互补，满足大部分的需求。近几年，出现了类似 ReactNative 和小程序这种深度定制的开发模式，开发只需要写 Javascript 就可以产出性能可与原生媲美的产品，通过脚本语言面向开发者，实际跑的确是的原生组件。</p><h2 id="小程序优势"><a href="#小程序优势" class="headerlink" title="小程序优势"></a>小程序优势</h2><p>目前小程序、ReactNative 技术火热，在前端开发社区中受到开发者的青睐。那么现在是2018年，要问我开发一个 APP 首选是什么，我肯定会先考虑微信小程序，下面分析下小程序独有的一些优势。<br><img src="https://upload-images.jianshu.io/upload_images/2250902-b24c867917207c25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信小程序的独有优势"><br>作为开发者，我们肯定希望一个新的开发模式最好能用现在的知识去开发，而不是学习新的语言，小程序开发没有去造新的语言，使用前端开发的知识基础就能上手开发，小程序官方提供了详细的开发文档和资料，并且提供了一套开发工具供开发者使用，一直在迭代维护升级中，小程序提供了丰富的接口帮助我们快速的开发业务。减少了很多开发成本。</p><p>作为运营人员，小程序提供了一整套的运营体系，包括多维的入口，数据分析工具，各项数据都能很好的展现给运营人员，再加上微信的流量红利，能够减少很多运营者获取用户的成本。</p><h2 id="小程序适合的应用场景"><a href="#小程序适合的应用场景" class="headerlink" title="小程序适合的应用场景"></a>小程序适合的应用场景</h2><p>从产品角度讲，产品的呈现形式也要符合用户场景，那么小程序这种形式的 APP 适合什么类型的产品呢？小程序的一句广告语是这样说的</p><blockquote><p>###<em>当有需要的时候，它刚好出现。</em></p></blockquote><p>那么，从这句话我们就能领悟出来，小程序其实适合的是<strong>不常使用且刚需的服务</strong>，或者简单点叫<strong>小频刚需</strong>，比如平常我们线下的打车、拼车、点餐、或者查违章等服务，这些需求我们平常可能一周就需要几次，没必要去下载一个 APP 在手机里睡大觉，所以小程序这种轻应用的价值就体现出来了，用完即走，不需要关心它会占用你的手机内存，因为关闭之后，小程序会自动的『消失』</p><h2 id="小程序的缺点"><a href="#小程序的缺点" class="headerlink" title="小程序的缺点"></a>小程序的缺点</h2><p>月有阴晴圆缺，每个事物都不是那么完美的，微信小程序也一样，那么它有什么缺点呢？我主要总结的几个方面</p><ul><li>受控于微信，功能限制</li><li>审核繁琐，时间相对较长</li><li>API不成熟，小程序层面的坑很多</li></ul><h2 id="小程序的未来"><a href="#小程序的未来" class="headerlink" title="小程序的未来"></a>小程序的未来</h2><p>以上劣势其实部分都在逐渐好转，因为微信小程序一直都在迭代中，那么未来小程序的发展会怎样呢？<br><img src="https://upload-images.jianshu.io/upload_images/2250902-7b7222af3bf78e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小程序未来趋势"></p><p>从之前的PC互联网到移动互联网，现在即将迎来的是轻应用时代的互联网，各个手机厂商和一些头部 APP 都开始抢夺轻应用这块蛋糕，竞争会越来越激烈，不过我希望最终有一种标准占主导地位，这样对用户和开发者来说都是最好的。小程序的先发优势和流量优势使微信小程序的发展更加壮大，但是毕竟小程序还是在逐步成长的阶段，目前还不是很成熟，未来小程序的整套体系会越来越清晰和完善。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一枚开发人员，选择开发一款产品之前，我们肯定会进行一个技术上的选型，什么模式的开发更适合，能够更高效，或者更适合这个产品的特性？&lt;/p&gt;
&lt;h2 id=&quot;技术选型&quot;&gt;&lt;a href=&quot;#技术选型&quot; class=&quot;headerlink&quot; title=&quot;技术选型&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>炫酷好玩前端资源大盘点(持续更新)</title>
    <link href="https://w3cay.com/post/d77146f8.html"/>
    <id>https://w3cay.com/post/d77146f8.html</id>
    <published>2018-06-24T04:55:47.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="酷前端-coofend"><a href="#酷前端-coofend" class="headerlink" title="酷前端 - coofend"></a><a href="https://github.com/w3cay/coofend" rel="external nofollow noopener noreferrer" target="_blank">酷前端 - coofend</a></h1><h2 id="分享前端圈子好玩炫酷吊炸天的一切事物-😎"><a href="#分享前端圈子好玩炫酷吊炸天的一切事物-😎" class="headerlink" title="分享前端圈子好玩炫酷吊炸天的一切事物 😎"></a>分享前端圈子好玩炫酷吊炸天的一切事物 😎</h2><p>排名不分先后*</p><ul><li><a href="http://rleonardi.com/interactive-resume/" rel="external nofollow noopener noreferrer" target="_blank">Robby Leonardi</a>  <em>超级玛丽简历，见过最有创意的简历</em></li><li><a href="http://map.norsecorp.com/" rel="external nofollow noopener noreferrer" target="_blank">Norse Attack Map</a>    <em>全球实时网络攻击图谱</em></li><li><a href="http://species-in-pieces.com/" rel="external nofollow noopener noreferrer" target="_blank">pieces in pieces</a>   <em>使用碎片的动画绘制出30个即将灭局的物种，效果很棒</em></li><li><a href="http://www.playkeepout.com/" rel="external nofollow noopener noreferrer" target="_blank">Keep Out!</a>    <em>基于WebGL的游戏，很赞！</em></li><li><a href="http://pro.weltrade.com/en/intro" rel="external nofollow noopener noreferrer" target="_blank">WELTRADE</a>   <em>一个卖男装也这么有格调</em></li><li><a href="https://asciiartgen.now.sh/?s=Bright&amp;style=block" rel="external nofollow noopener noreferrer" target="_blank">Ascii Art Generator</a>   <em>Ascii码艺术字生成器</em></li><li><a href="http://worrydream.com/" rel="external nofollow noopener noreferrer" target="_blank">worrydream</a>   <em>个人搏客-排版很吊的那种</em></li><li><a href="http://up.qq.com/act/a20180418up/index.html" rel="external nofollow noopener noreferrer" target="_blank">腾讯新文创大会H5</a> <code>canvas</code> <code>video</code></li><li><a href="https://throughthedark.withgoogle.com/" rel="external nofollow noopener noreferrer" target="_blank">Through The Dark</a>   <em>一位歌手父亲写个白血病儿子的歌，用webGL展现</em></li><li><a href="http://dinosaurpictures.org/ancient-earth" rel="external nofollow noopener noreferrer" target="_blank">Ancient Earth globe</a>   <em>一个记录数亿年间地球面貌变迁的网站</em> <code>threejs</code> <code>tweenjs</code> </li><li><a href="https://carbon.now.sh/" rel="external nofollow noopener noreferrer" target="_blank">Carbon</a>   <em>将代码片段美化并生成图片的工具</em></li><li><a href="http://radio.garden/" rel="external nofollow noopener noreferrer" target="_blank">Radio Garden</a>  <em>(需翻墙)可以在谷歌地球上收听全世界的广播电台</em> </li><li><a href="https://hyper.is/" rel="external nofollow noopener noreferrer" target="_blank">Hyper</a>  <em>基于前端桌面应用框架 electron 的命令行工具，跨平台</em>  <code>electron</code> </li><li><a href="http://giojs.org/html/playground.html" rel="external nofollow noopener noreferrer" target="_blank">giojs</a>  <em>基于 Three.js 的地球 3D 数据可视化库</em>  <code>Three.js</code> </li></ul><blockquote><p>欢迎同道中人提 PR 或 Issues 一起分享炫酷的前端事物<br>github项目地址： <a href="https://github.com/w3cay/coofend" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/w3cay/coofend</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;酷前端-coofend&quot;&gt;&lt;a href=&quot;#酷前端-coofend&quot; class=&quot;headerlink&quot; title=&quot;酷前端 - coofend&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/w3cay/coofend&quot; rel=&quot;ext
      
    
    </summary>
    
    
      <category term="前端" scheme="https://w3cay.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="炫酷网站" scheme="https://w3cay.com/tags/%E7%82%AB%E9%85%B7%E7%BD%91%E7%AB%99/"/>
    
      <category term="好玩工具" scheme="https://w3cay.com/tags/%E5%A5%BD%E7%8E%A9%E5%B7%A5%E5%85%B7/"/>
    
      <category term="创意" scheme="https://w3cay.com/tags/%E5%88%9B%E6%84%8F/"/>
    
  </entry>
  
  <entry>
    <title>Web渲染及性能优化</title>
    <link href="https://w3cay.com/post/3165caf.html"/>
    <id>https://w3cay.com/post/3165caf.html</id>
    <published>2018-06-23T08:21:35.000Z</published>
    <updated>2023-08-19T10:39:38.306Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名 web 开发工程师，开发一个网页很简单，但是想开发出一个性能强加载速度快的网页却不是那么简单，涉及到的方面很多，比如服务端的响应，客户端加载、渲染，开发者代码的组织等等，很多因素都可能使你的页面性能不佳，今天根据我最近的学习，着重总结一下客户端渲染相关的优化建议和相关原理。</p><h3 id="浏览器的渲染过程"><a href="#浏览器的渲染过程" class="headerlink" title="浏览器的渲染过程"></a>浏览器的渲染过程</h3><p>浏览器的渲染过程非常的复杂，如果想讲清楚大概可以写一本书，比如《WebKit技术内幕》，但是长话短说，把浏览器的渲染过程总结一下可以分为下面几个步骤：</p><ol><li>DOM Tree生成：通过网络加载到浏览器的本地，经过HTML解析器处理，生成 DOM Tree</li><li>CSS 规则生成：CSS 样式表经过 CSS 解析器的处理计算，生成最终的 CSS 规则</li><li>javascipt的解析和执行：由于浏览器渲染是单线程的，javascript 的解析执行是在浏览器解析 HTML 过程中进行的，包括词法分析、抽象语法树、字节码以及本地代码的生成等过程</li><li>布局 Layout生成： DOM Tree 和 CSS ruler 经过一顿糅合的布局样式计算，形成 renderTree </li><li>绘制: 根据计算得来的renderTree，绘制每个元素的大小、边框、位置、阴影等效果，绘制的过程是分层进行的，比如图片和一些 Transform 效果都在不同的层进行绘制</li><li>合并：将绘制的各层进行合并渲染，最终体现在屏幕像素中</li></ol><p>那么在这几个步骤中，我们怎样优化才能使性能有一个更好的提升呢？</p><h3 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h3><p>在页面渲染过程中，1到3的过程可能只执行一次，但是后面的4到6至少执行一次，所以为了更好的性能，应尽量减少后面的渲染触发</p><p>在 DOM Tree 生成阶段，我们应尽量减少 DOM 的层级<br>在 CSS 规则生成阶段，同理，为了更快的解析和计算，尽量简化规则样式</p><p>在 JavaScript 解析执行阶段，除了通过优化代码的编写，执行时机，对于计算量庞大的模块，应放在 Web Worker 中执行，避免因 javascript 的执行而导致 UI 渲染的卡顿与延迟</p><p>在布局阶段，除了上面提到的优化，尽量将 JavaScript 代码置于 body 标签底部，除了可以减少页面渲染的卡顿，还可以减少页面的不必要回流计算</p><p>在绘制合成阶段，我们要将频繁变动的组件或者动画提升至合成层进行渲染，并且动画尽量使用 css 的 transform 进行描述，而不是对元素的大小、位置属性进行重新赋值，导致多次回流与重绘，使用transform的原理是将这部分的渲染交给 GPU 来进行处理，极大的增强了渲染性能。</p><p>以上就是我对渲染相关的优化总结，上面的优化可以让浏览器更『轻松』的处理我们的 UI 效果，当然 web 的优化还有很多方面，单单是对浏览器内部的优化还不足以让用户有很大的感知，所以全方位的实际问题定位才是解决 web 体验的良方。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一名 web 开发工程师，开发一个网页很简单，但是想开发出一个性能强加载速度快的网页却不是那么简单，涉及到的方面很多，比如服务端的响应，客户端加载、渲染，开发者代码的组织等等，很多因素都可能使你的页面性能不佳，今天根据我最近的学习，着重总结一下客户端渲染相关的优化建议和
      
    
    </summary>
    
    
      <category term="web性能" scheme="https://w3cay.com/tags/web%E6%80%A7%E8%83%BD/"/>
    
      <category term="web动画" scheme="https://w3cay.com/tags/web%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
</feed>
